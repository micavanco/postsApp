{"version":3,"sources":["C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/index.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/+state/posts/posts.actions.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/+state/posts/posts.effects.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/+state/posts/posts.reducer.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/+state/posts/posts.selectors.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/nav-bar/nav-bar.component.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/nav-bar/nav-bar.component.html","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/post-box/post-box.component.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/post-box/post-box.component.html","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/post-details/post-details.component.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/post-details/post-details.component.html","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/posts-container/posts-container.component.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/posts-container/posts-container.component.html","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/posts.module.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/libs/posts/src/lib/services/posts.service.ts","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/node_modules/@ngrx/effects/__ivy_ngcc__/fesm2015/effects.js","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/node_modules/@ngrx/entity/__ivy_ngcc__/fesm2015/entity.js","C:/Users/MO/Documents/Projekty_Web/wordpress-posts-app/node_modules/@ngrx/store/__ivy_ngcc__/fesm2015/store.js"],"names":[],"mappings":"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,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC;IACtD,CAAC;;wEAdU,YAAY;+FAAZ,YAAY,WAAZ,YAAY;6FAAZ,YAAY;cADxB,wDAAU;;;;;;;;;;;;;;ACLX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEoG;AAC9D;AACkB;AACM;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,4BAA4B;AAC1F;AACA;AACA,wDAAwD,4BAA4B,IAAI,YAAY,GAAG,gBAAgB;AACvH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D,6DAA6D,4BAA4B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,kBAAkB,eAAe,GAAG,GAAG,EAAE;AACzC,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAE,WAAW,gEAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6DAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,iBAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,kDAAkD,8BAA8B,sDAAe,eAAe;AAC9G,mBAAmB,gEAAyB,EAAE,8CAA8C;AAC5F;AACA,KAAK;AACL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,oBAAoB,EAAE,EAAE,QAAQ,EAAE;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,4DAA4D,qCAAqC;AACjG,wBAAwB,gEAAyB,EAAE,wDAAwD;AAC3G,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA,8EAA8E,SAAS;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kEAAkE,sCAAsC,sDAAe,wBAAwB,sDAAe,CAAC,wDAAQ,GAAG;AAC1K,2BAA2B,gEAAyB,EAAE,8DAA8D;AACpH;AACA,KAAK,6BAA6B;AAClC,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,6BAA6B,GAAG;AAC/D,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oCAAoC,sDAAe,sBAAsB;AACvI,yBAAyB,gEAAyB,EAAE,0DAA0D;AAC9G;AACA,KAAK;AACL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,2BAA2B,EAAE,EAAE,QAAQ,EAAE;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,kDAAkD,gCAAgC;AAClF,mBAAmB,gEAAyB,EAAE,8CAA8C;AAC5F;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0DAA0D,kCAAkC,sDAAe,cAAc;AACzH,uBAAuB,gEAAyB,EAAE,sDAAsD;AACxG;AACA,KAAK;AACL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,mBAAmB,EAAE,EAAE,QAAQ,EAAE;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAAc;AAC3C,6BAA6B,4DAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yEAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA,4EAA4E,2CAA2C,sDAAe,CAAC,wDAAQ,GAAG,sDAAe,CAAC,yDAAW,GAAG,sDAAe,oBAAoB;AACnN,gCAAgC,gEAAyB,EAAE,wEAAwE;AACnI;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,6BAA6B,OAAO,oDAAM,SAAS,yDAAW,IAAI,GAAG;AAC1E,KAAK,6BAA6B,OAAO,oDAAM,6BAA6B;AAC5E;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B,uBAAuB,yDAAW;AAClC,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,sDAAe,0BAA0B,sDAAe,oBAAoB;AACvL,4BAA4B,gEAAyB,EAAE,gEAAgE;AACvH;AACA,KAAK,+BAA+B;AACpC,KAAK,6BAA6B,OAAO,oDAAM,6BAA6B;AAC5E;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,+BAA+B,GAAG;AACjE,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,2CAA2C,sDAAe,eAAe,sDAAe,CAAC,sDAAe,GAAG;AACvL,gCAAgC,gEAAyB,EAAE,wEAAwE;AACnI;AACA,KAAK,oBAAoB;AACzB,KAAK,OAAO,sDAAQ;AACpB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,oBAAoB,GAAG,OAAO,sDAAe,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAA0D;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,sCAAsC,0DAA0D;AAChG,sCAAsC,0DAA0D;AAChG;AACA;AACA;AACA;AACA,4BAA4B,8DAAuB,EAAE,6BAA6B;AAClF,4BAA4B,8DAAuB,EAAE,oDAAoD,0CAA0C,EAAE;AACrJ;AACA,SAAS,4EAA4E;AACrF,SAAS,qEAAqE;AAC9E,SAAS,oDAAoD;AAC7D,SAAS,sDAAsD;AAC/D,OAAO;AACP,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA,qBAAqB,4EAA4E;AACjG,qBAAqB,qEAAqE;AAC1F,qBAAqB,oDAAoD;AACzE,qBAAqB,sDAAsD;AAC3E;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAuB,EAAE,yBAAyB;AAC1E,wBAAwB,8DAAuB,EAAE,gDAAgD,sCAAsC,EAAE;AACzI;AACA,SAAS,0DAA0D;AACnE;AACA,SAAS,oDAAoD;AAC7D;AACA,SAAS,+CAA+C;AACxD;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ,cAAc,oDAAoD,gEAAyB,oBAAoB,kCAAkC,EAAE,EAAE;AACrJ,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAA0D;AAC/E;AACA,qBAAqB,oDAAoD;AACzE;AACA,qBAAqB,+CAA+C;AACpE;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8DAAuB,EAAE,8BAA8B;AACpF,6BAA6B,8DAAuB,EAAE,qDAAqD,2CAA2C,EAAE;AACxJ;AACA,SAAS,kEAAkE;AAC3E,SAAS,sEAAsE;AAC/E,OAAO;AACP,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA,qBAAqB,kEAAkE;AACvF,qBAAqB,sEAAsE;AAC3F;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAE83B;;AAE93B,gC;;;;;;;;;;;;AC7lEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACuH;AAChD;AACwF;AACtC;;AAEzH;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACwC;AACT;AACO;AACtC,yBAAyB;AACzB,WAAW,EAYV;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,iCAAiC;AACjC,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY,EAAE;AACd;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gDAAgD;AAChD;AACA;AACA,KAAK;AACL,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,sCAAsC,EAAE;AACxC,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,sCAAsC,EAAE;AACxC,8BAA8B,eAAe;AAC7C,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA,2BAA2B;AAC3B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,qEAAqE,oCAAoC;AACzG,0BAA0B;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,8BAA8B,2DAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,WAAW,iDAAiD;AAC5D,6BAA6B;AAC7B;AACA,KAAK,KAAK;AACV;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,MAAM,kDAAkD;AACxD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,sCAAsC,qEAAc;AACpD;AACA,mBAAmB,EAAE;AACrB,iDAAiD,kEAAW;AAC5D,kCAAkC,0DAAG;AACrC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,WAAW,kDAAK;AAChB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,4BAA4B,iEAAU;AACtC,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,sBAAsB,+CAAU;AAChC;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B,sDAAe,CAAC,iEAAqB,GAAG;AAC/G,gBAAgB,gEAAyB,EAAE,wCAAwC;AACnF;AACA;AACA,KAAK,OAAO,+CAAU,gBAAgB,OAAO,oDAAM,SAAS,iEAAqB,IAAI;AACrF;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,OAAO,+CAAiB;AACvD,sBAAsB,oDAAM;AAC5B,uBAAuB,iEAAqB;AAC5C,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;AAC9B;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA,WAAW,6DAAM;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAWV;AACD;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,qDAAqD,sBAAsB,iCAAiC,kBAAkB;AAC9H;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA,wBAAwB,4CAA4C;AACpE,eAAe,EAAE;AACjB;AACA,eAAe,WAAW,GAAG,qBAAqB,EAAE,qBAAqB;AACzE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,gCAAgC,4DAAc;AAC9C,WAAW,EAAE;AACb,8BAA8B,4DAAc;AAC5C,WAAW,EAAE;AACb,kCAAkC,4DAAc;AAChD,WAAW,EAAE;AACb,0BAA0B,4DAAc;AACxC,WAAW,EAAE;AACb,yBAAyB,4DAAc;AACvC,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C,WAAW,EAAE;AACb,4BAA4B,4DAAc;AAC1C,WAAW,EAAE;AACb,kCAAkC,4DAAc;;AAEhD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,4BAA4B,4CAAO;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AA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OAAO,8DAAyB;AACnD,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,sDAAQ;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sDAAQ,QAAQ,sDAAQ;AACvE,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,sDAAQ;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB,8DAAuB,EAAE,sBAAsB;AACpE,qBAAqB,8DAAuB,EAAE,6CAA6C,mCAAmC,EAAE,EAAE;AAClI,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB,iBAAiB;AACjB,KAAK,eAAe,EAAE;AACtB;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAWV;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,kDAAkD;AAC7D;AACA;AACA,+BAA+B,EAAE;AACjC,sBAAsB,wDAAS;AAC/B;AACA;AACA;AACA,wCAAwC,qBAAqB,uCAAuC,wDAAS,EAAE;AAC/G;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,cAAc,kDAAK;AACnB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,4BAA4B,4CAAO;AACnC,eAAe,kDAAK;AACpB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,kDAAK;AAC/B,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,8CAA8C,kEAAW,IAAI,0DAAG;AAChE,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,mCAAmC,iDAAY,aAAa,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA,kCAAkC,iDAAY,aAAa,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI,6DAAM;AACvB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,gCAAgC,oEAAa,IAAI,+DAAQ;AACzD,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEisB;;AAEjsB,mC;;;;;;;;;;;;ACtkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAC6C;AACH;;AAE1C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iDAAiD;AACjD;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,0BAA0B,kEAAc;AACxC,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,EAAE;AAC/B,mBAAmB,EAAE;AACrB,4BAA4B,kEAAc;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAc;AACrC,4BAA4B,kEAAc;AAC1C,uBAAuB,kEAAc;AACrC,yBAAyB,kEAAc;AACvC;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,sCAAsC;AACtC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,iDAAiD,WAAW,uCAAuC;AACnG;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B;AAC/B;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,mCAAmC;AAC9C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA,yCAAyC;AACzC,WAAW,yBAAyB,kBAAkB;AACtD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oCAAoC;AACpC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,sDAAsD;AACtD,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAiHV;AACD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EASV;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAyBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAE2C;;AAE3C,kC;;;;;;;;;;;;ACp+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAC8H;AAClD;AACuB;;AAEnG;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,OAAO,OAAO,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG,yEAAyE,4CAA4C;AACnI;AACA,YAAY;AACZ;AACwC;AACxC;AACA;AACA;AACA,mBAAmB,KAAK;AACxB,oBAAoB;AACpB;AACA,oDAAoD,qBAAqB,OAAO;AAChF;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,sDAAsD,WAAW,OAAO;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY,+BAA+B,EAAE;AAC7C;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,yBAAyB,EAAE;AAC3B,6BAA6B,oDAAe;AAC5C;AACA,eAAe,aAAa;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,0DAA0D,oCAAoC;AAC9F,uBAAuB,gEAAyB,EAAE,sDAAsD;AACxG;AACA;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C,WAAW,EAAE;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,8BAA8B,4DAAc;AAC5C,WAAW,EAAE;AACb,2BAA2B,4DAAc;AACzC,WAAW,EAAE;AACb,0BAA0B,4DAAc;AACxC,WAAW,EAAE;AACb,4BAA4B,4DAAc;AAC1C,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C,WAAW,EAAE;AACb,8BAA8B,4DAAc;AAC5C,WAAW,EAAE;AACb,2BAA2B,4DAAc;AACzC,WAAW,EAAE;AACb,4BAA4B,4DAAc;AAC1C,WAAW,EAAE;AACb,8BAA8B,4DAAc;AAC5C,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C,WAAW,EAAE;AACb,4BAA4B,4DAAc;AAC1C,WAAW,EAAE;AACb,oCAAoC,4DAAc;AAClD,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C;AACA;AACA,UAAU;AACV;AACA,wCAAwC,4DAAc;AACtD;AACA;AACA,UAAU;AACV;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA,UAAU;AACV;AACA,oCAAoC,4DAAc;AAClD;AACA;AACA;AACA,UAAU;AACV;AACA,gCAAgC,4DAAc;AAC9C;AACA;AACA,UAAU;AACV;AACA,iCAAiC,4DAAc;AAC/C;AACA;AACA,UAAU;AACV;AACA,mCAAmC,4DAAc;;AAEjD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA,oDAAoD;AACpD,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,mBAAmB,wBAAwB;AAC3C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,6BAA6B;AACpD,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4CAA4C,qBAAqB,MAAM;AACvE;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uDAAuD,EAAE;AACzD;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,gCAAgC,+CAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,2BAA2B,EAAE;AAC7B,6BAA6B,oDAAe;AAC5C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uBAAuB,4DAA4D;AACnF,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS,eAAe,EAAE,OAAO;AACjC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,wCAAwC,EAAE;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,0DAA0D,kCAAkC,sDAAe,4BAA4B,sDAAe,iBAAiB,sD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CA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,EAAE;AACpC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,8BAA8B,EAAE;AAChC,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,KAAK;AACxB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,+DAAS;AACrB,4DAA4D,YAAY;AACxE;AACA;AACA,8CAA8C,YAAY;AAC1D,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,uDAAuD,QAAQ,OAAO,mBAAmB,KAAK,kBAAkB,SAAS,QAAQ;AACjI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sCAAsC,oDAAM;AAC5C,uCAAuC,YAAY,4BAA4B,kBAAkB;AACjG;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,QAAQ,+DAAS;AACjB,8BAA8B,wKAAwK;AACtM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA,8CAA8C,2DAA2D;AACzG;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA,6CAA6C,qDAAqD;AAClG;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA,yCAAyC,4BAA4B;AACrE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AAC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CjB;AACA;AACA;AACA;AACA,wBAAwB,sDAAQ;AAChC;AACA,6BAA6B,oDAAM;AACnC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB,8DAAuB,EAAE,oBAAoB;AAChE,mBAAmB,8DAAuB,EAAE,2CAA2C,iCAAiC,EAAE,EAAE;AAC5H,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB,iBAAiB;AACjB,KAAK,eAAe,EAAE;AACtB;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,+BAA+B,4DAAc;AAC7C;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sCAAsC,4DAAc;AACpD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,kCAAkC,4DAAc;AAChD,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA,eAAe,EAAE;AACjB,gCAAgC,EAAE;AAClC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kDAAkD,EAAE,oCAAoC,EAAE;AAC1F,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe,OAAO,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,KAAK;AAChB,YAAY,EAAE;AACd;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,oDAAoD,EAAE;AACtD,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEupE;;AAEvpE,iC","file":"libs-posts-src.js","sourcesContent":["export * from './lib/+state/posts/posts.actions';\nexport * from './lib/+state/posts/posts.reducer';\nexport * from './lib/+state/posts/posts.selectors';\nexport * from './lib/+state/posts/posts.models';\nexport * from './lib/posts.module';\n","import { createAction, props } from '@ngrx/store';\n\nexport const loadPosts = createAction('[Posts] Load Posts');\n\nexport const loadPostsSuccess = createAction(\n  '[Posts] Load Posts Success',\n  props<{ data: any }>()\n);\n\nexport const loadPostsFailure = createAction(\n  '[Posts] Load Posts Failure',\n  props<{ error: any }>()\n);\n\nexport const setPageNumber = createAction(\n  '[Posts] Set Page Number',\n  props<{ pageNumber: number }>()\n);\n\nexport const loadPost = createAction('[Posts] Load Post', props<{ id: any }>());\n\nexport const loadPostSuccess = createAction(\n  '[Posts] Load Post Success',\n  props<{ data: any }>()\n);\n\nexport const loadPostFailure = createAction(\n  '[Posts] Load Post Failure',\n  props<{ error: any }>()\n);\n\nexport const loadComments = createAction('[Posts] Load Comments', props<{ id: any }>());\n\nexport const loadCommentsSuccess = createAction(\n  '[Posts] Load Comments Success',\n  props<{ data: any }>()\n);\n\nexport const loadCommentsFailure = createAction(\n  '[Posts] Load Comments Failure',\n  props<{ error: any }>()\n);\n","import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport * as PostsActions from './posts.actions';\nimport { catchError, map, mergeMap, withLatestFrom } from 'rxjs/operators';\nimport { PostsService } from '../../services/posts.service';\nimport { of } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { State } from './posts.reducer';\n\n@Injectable()\nexport class PostsEffects {\n  loadPosts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PostsActions.loadPosts),\n      withLatestFrom(this.store$),\n      mergeMap(([action, store]) => this.postsService.getAllPostsByPage(store.posts.pageNumber)\n        .pipe(\n          map(data => PostsActions.loadPostsSuccess({data})),\n          catchError(error => of(PostsActions.loadPostsFailure({error})))\n        ))\n    )\n  );\n\n  loadPost$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PostsActions.loadPost),\n      withLatestFrom(this.store$),\n      mergeMap(([action, store]) => this.postsService.getPostById(store.posts.selectedId)\n        .pipe(\n          map(data => PostsActions.loadPostSuccess({data})),\n          catchError(error => of(PostsActions.loadPostFailure({error})))\n        ))\n    )\n  );\n\n  loadComments$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PostsActions.loadComments),\n      withLatestFrom(this.store$),\n      mergeMap(([action, store]) => this.postsService.getComments(store.posts.selectedId)\n        .pipe(\n          map(data => PostsActions.loadCommentsSuccess({data})),\n          catchError(error => of(PostsActions.loadCommentsFailure({error})))\n        ))\n    )\n  );\n\n  constructor(private actions$: Actions, private postsService: PostsService, private store$: Store<State>) {}\n}\n","import { createReducer, on, Action } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport * as PostsActions from './posts.actions';\nimport { PostsEntity } from './posts.models';\n\nexport const POSTS_FEATURE_KEY = 'posts';\n\nexport interface State extends EntityState<PostsEntity> {\n  selectedId?: string | number; // which Posts record has been selected\n  loaded: boolean; // has the Posts list been loaded\n  error?: string | null; // last known error (if any)\n  posts: any;\n  post: any;\n  postsFound: number;\n  pageNumber: number;\n  loadedPost: boolean;\n  comments: any;\n  errorPost?: string;\n}\n\nexport interface PostsPartialState {\n  readonly [POSTS_FEATURE_KEY]: State;\n}\n\nexport const postsAdapter: EntityAdapter<PostsEntity> = createEntityAdapter<\n  PostsEntity\n>();\n\nexport const initialState: State = postsAdapter.getInitialState({\n  // set initial required properties\n  loaded: false,\n  loadedPost: false,\n  posts: null,\n  post: null,\n  comments: null,\n  postsFound: 0,\n  pageNumber: 0,\n});\n\nconst postsReducer = createReducer(\n  initialState,\n  on(PostsActions.loadPosts, (state) => ({\n    ...state,\n    loaded: false,\n    error: null,\n    posts: null\n  })),\n  on(PostsActions.loadPostsSuccess, (state, { data }) =>\n    ({...state, loaded: true, error: null, posts: data.posts, postsFound: data.found})\n  ),\n  on(PostsActions.loadPostsFailure, (state, { error }) => ({ ...state, error })),\n  on(PostsActions.loadPost, (state, {id}) => ({\n    ...state,\n    selectedId: id,\n    loadedPost: false,\n    post: null\n  })),\n  on(PostsActions.loadPostSuccess, (state, { data }) =>\n    ({...state, loadedPost: true, errorPost: null, post: data})\n  ),\n  on(PostsActions.loadPostFailure, (state, { error }) => ({ ...state, errorPost: error })),\n  on(PostsActions.setPageNumber, (state, { pageNumber }) => ({ ...state, pageNumber })),\n  on(PostsActions.loadComments, (state, {id}) => ({\n    ...state,\n    comments: null\n  })),\n  on(PostsActions.loadCommentsSuccess, (state, { data }) =>\n    ({...state, comments: data})\n  ),\n  on(PostsActions.loadCommentsFailure, (state, { error }) => ({ ...state })),\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n  return postsReducer(state, action);\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport {\n  POSTS_FEATURE_KEY,\n  State,\n  PostsPartialState,\n  postsAdapter,\n} from './posts.reducer';\n\n// Lookup the 'Posts' feature state managed by NgRx\nexport const getPostsState = createFeatureSelector<PostsPartialState, State>(\n  POSTS_FEATURE_KEY\n);\n\nconst { selectAll } = postsAdapter.getSelectors();\n\nexport const getPostsLoaded = createSelector(\n  getPostsState,\n  (state: State) => state.loaded\n);\n\nexport const getPostsError = createSelector(\n  getPostsState,\n  (state: State) => state.error\n);\n\nexport const getPosts = createSelector(\n  getPostsState,\n  (state: State) => state.posts\n);\n\nexport const getPageNumber = createSelector(\n  getPostsState,\n  (state: State) => state.pageNumber\n);\n\nexport const getPostsFound = createSelector(\n  getPostsState,\n  (state: State) => state.postsFound\n);\n\nexport const getSelectedId = createSelector(\n  getPostsState,\n  (state: State) => state.selectedId\n);\n\nexport const getSelectedPost = createSelector(\n  getPostsState,\n  (state: State) => state.post\n);\n\nexport const getComments = createSelector(\n  getPostsState,\n  (state: State) => state.comments\n);\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as PostsActions from '../../lib/+state/posts/posts.actions';\nimport { getPostsFound } from '@wordpress-posts-app/posts';\n\n@Component({\n  selector: 'wordpress-posts-app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.scss']\n})\nexport class NavBarComponent implements OnInit {\n  foundPosts: number;\n  currentPage = 0;\n  barNumbers = [0, 1, 2, 3, 4];\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    this.store.select(getPostsFound).subscribe(found => this.foundPosts = found);\n  }\n\n  onSelect(pageNumber: number) {\n    this.currentPage = pageNumber;\n    this.store.dispatch(PostsActions.setPageNumber({pageNumber: pageNumber}));\n    this.store.dispatch(PostsActions.loadPosts());\n    if (pageNumber > 1) {\n      this.barNumbers = [];\n      for (let i = -2; i < 3; i++) {\n        this.barNumbers.push(pageNumber + i);\n        if (pageNumber + i > this.foundPosts) {\n          break;\n        }\n      }\n    }\n  }\n\n  onPrevious() {\n    if(this.currentPage === 1) {\n      this.barNumbers = [0, 1, 2, 3, 4];\n    } else if (this.currentPage > 1){\n      this.onSelect(this.currentPage - 1)\n    }\n  }\n\n  onNext() {\n    this.onSelect(this.currentPage + 1)\n  }\n\n}\n","<nav>\n  <ul class=\"pagination justify-content-center\">\n    <li class=\"page-item\">\n      <a class=\"page-link\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\" (click)=\"onPrevious()\">Previous</a>\n    </li>\n    <li [classList]=\"currentPage === found ? 'page-item active' : 'page-item'\" *ngFor=\"let found of barNumbers\"><a class=\"page-link\" href=\"#\" (click)=\"onSelect(found)\">{{found}}</a></li>\n    <li class=\"page-item\">\n      <a class=\"page-link\" href=\"#\" (click)=\"onNext()\">Next</a>\n    </li>\n  </ul>\n</nav>\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'wordpress-posts-app-post-box',\n  templateUrl: './post-box.component.html',\n  styleUrls: ['./post-box.component.scss']\n})\nexport class PostBoxComponent implements OnInit {\n  @Input() data;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card post\">\n  <img src=\"{{data?.featured_image}}\" class=\"card-img-top image\" alt=\"...\">\n  <div class=\"card-body\">\n    <div [routerLink]=\"['', data?.ID]\" class=\"card-title post__title\">{{data?.title}}</div>\n    <p class=\"card-text content\" [innerHTML]=\"data?.content\"></p>\n    <a href=\"#\" [routerLink]=\"['', data?.ID]\" class=\"btn btn-primary\">Open Post</a>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { getComments, getSelectedPost, loadComments, loadPost } from '@wordpress-posts-app/posts';\n\n@Component({\n  selector: 'wordpress-posts-app-post-details',\n  templateUrl: './post-details.component.html',\n  styleUrls: ['./post-details.component.scss']\n})\nexport class PostDetailsComponent implements OnInit {\n  post: any;\n  comments: any;\n  postId: number;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router ,\n              private store: Store) {\n    this.route.params.subscribe(params => {\n      this.postId = params['id'];\n      this.store.dispatch(loadPost({id: this.postId}));\n      this.store.dispatch(loadComments({id: this.postId}));\n    });\n  }\n\n  ngOnInit(): void {\n    this.store.select(getSelectedPost).subscribe(post => this.post = post);\n\n    this.store.select(getComments).subscribe(comments => this.comments = comments);\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"post-detail\">\n    <button type=\"button\" class=\"btn btn-primary exit\" [routerLink]=\"['']\">×</button>\n    <div class=\"card post\">\n      <img src=\"{{post?.featured_image}}\" class=\"card-img-top image\" alt=\"...\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title post__title\">{{post?.title}}</h5>\n        <p class=\"card-text content\" [innerHTML]=\"post?.content\"></p>\n      </div>\n    </div>\n    <h3>Comments</h3>\n    <div class=\"comments-container\">\n      <div class=\"card post\" *ngFor=\"let comment of comments.comments\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title post__title\">Author: {{comment?.author?.name}}</h5>\n          <p class=\"card-text content\" [innerHTML]=\"comment?.content\"></p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as PostsActions from '../../lib/+state/posts/posts.actions';\nimport { getPosts, getPageNumber, getPostsLoaded } from '@wordpress-posts-app/posts';\n\n@Component({\n  selector: 'wordpress-posts-app-posts-container',\n  templateUrl: './posts-container.component.html',\n  styleUrls: ['./posts-container.component.scss']\n})\nexport class PostsContainerComponent implements OnInit {\n  posts: object[];\n  pageNumber: number;\n  didPostsLoaded: boolean;\n  iterable = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(PostsActions.loadPosts());\n\n    this.store.select(getPosts).subscribe(posts => this.posts = posts);\n\n    this.store.select(getPageNumber).subscribe(page => this.pageNumber = page);\n\n    this.store.select(getPostsLoaded).subscribe(loaded => this.didPostsLoaded = loaded)\n  }\n\n}\n","<div class=\"posts container-fluid\">\n  <wordpress-posts-app-nav-bar></wordpress-posts-app-nav-bar>\n  <div class=\"posts__container\" *ngIf=\"didPostsLoaded\">\n    <wordpress-posts-app-post-box *ngFor=\"let post of iterable; let index\"\n                                  [data]=\"this.posts[index]\">\n    </wordpress-posts-app-post-box>\n  </div>\n  <div class=\"posts__spinner\">\n    <div class=\"spinner-border\" role=\"status\" *ngIf=\"!didPostsLoaded\">\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PostsContainerComponent } from './posts-container/posts-container.component';\nimport { PostBoxComponent } from './post-box/post-box.component';\nimport { PostDetailsComponent } from './post-details/post-details.component';\nimport { RouterModule } from '@angular/router';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromPosts from './+state/posts/posts.reducer';\nimport { PostsEffects } from './+state/posts/posts.effects';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PostsService } from './services/posts.service';\n\nconst routes = [\n  { path: '', component: PostsContainerComponent },\n  { path: ':id', component: PostDetailsComponent }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    StoreModule.forRoot({}),\n    StoreModule.forFeature(fromPosts.POSTS_FEATURE_KEY, fromPosts.reducer),\n    EffectsModule.forFeature([PostsEffects]),\n    EffectsModule.forRoot([]),\n    HttpClientModule\n  ],\n  declarations: [\n    PostsContainerComponent,\n    PostBoxComponent,\n    PostDetailsComponent,\n    NavBarComponent,\n  ],\n  providers: [HttpClientModule, PostsService]\n})\nexport class PostsModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nconst baseURL = 'https://public-api.wordpress.com/rest/v1.1/sites/en.blog.wordpress.com/posts/';\n\n@Injectable()\nexport class PostsService {\n\n  constructor(private http: HttpClient) { }\n\n  getAllPostsByPage(pageNumber: number) {\n    return this.http.get(baseURL + '?page=' + pageNumber)\n  }\n\n  getPostById(id: number) {\n    return this.http.get(baseURL + id);\n  }\n\n  getComments(postId: number) {\n    return this.http.get(baseURL + postId + '/replies');\n  }\n}\n","/**\n * @license Angular v10.0.9\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK',\n                    url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    build() {\n        return (new XMLHttpRequest());\n    }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\nBrowserXhr.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map","/**\n * @license NgRx 9.1.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { compose, ScannedActionsSubject, Store, createAction, StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { merge, Observable, Subject, defer, Notification } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize } from 'rxjs/operators';\nimport { Injectable, Inject, InjectionToken, ErrorHandler, NgModule, Optional, Injector, SkipSelf } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/models.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configures an effect created by `createEffect`.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nimport * as ɵngcc2 from '@ngrx/store';\nfunction EffectConfig() { }\nif (false) {\n    /**\n     * Determines if the action emitted by the effect is dispatched to the store.\n     * If false, effect does not need to return type `Observable<Action>`.\n     * @type {?|undefined}\n     */\n    EffectConfig.prototype.dispatch;\n    /**\n     * Determines if the effect will be resubscribed to if an error occurs in the main actions stream.\n     * @type {?|undefined}\n     */\n    EffectConfig.prototype.useEffectsErrorHandler;\n}\n/** @type {?} */\nconst DEFAULT_EFFECT_CONFIG = {\n    dispatch: true,\n    useEffectsErrorHandler: true,\n};\n/** @type {?} */\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n/**\n * @record\n */\nfunction CreateEffectMetadata() { }\nif (false) {\n    /* Skipping unnamed member:\n    [CREATE_EFFECT_METADATA_KEY]: EffectConfig;*/\n}\n/**\n * @record\n * @template T\n */\nfunction EffectMetadata() { }\nif (false) {\n    /** @type {?} */\n    EffectMetadata.prototype.propertyName;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effect_creator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * \\@usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n * @template C, DT, OT, R\n * @param {?} source A function which returns an `Observable`.\n * @param {?=} config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.\n * @return {?} If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n */\nfunction createEffect(source, config) {\n    /** @type {?} */\n    const effect = source();\n    /** @type {?} */\n    const value = Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config);\n    Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n        value,\n    });\n    return (/** @type {?} */ (effect));\n}\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getCreateEffectMetadata(instance) {\n    /** @type {?} */\n    const propertyNames = (/** @type {?} */ (Object.getOwnPropertyNames(instance)));\n    /** @type {?} */\n    const metadata = propertyNames\n        .filter((/**\n     * @param {?} propertyName\n     * @return {?}\n     */\n    propertyName => instance[propertyName] &&\n        instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)))\n        .map((/**\n     * @param {?} propertyName\n     * @return {?}\n     */\n    propertyName => {\n        /** @type {?} */\n        const metaData = ((/** @type {?} */ (instance[propertyName])))[CREATE_EFFECT_METADATA_KEY];\n        return Object.assign({ propertyName }, metaData);\n    }));\n    return metadata;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getSourceForInstance(instance) {\n    return Object.getPrototypeOf(instance);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effect_decorator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst METADATA_KEY = '__@ngrx/effects__';\n/**\n * @param {?=} config\n * @return {?}\n */\nfunction Effect(config = {}) {\n    return (/**\n     * @template T, K\n     * @param {?} target\n     * @param {?} propertyName\n     * @return {?}\n     */\n    function (target, propertyName) {\n        /** @type {?} */\n        const metadata = Object.assign(Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config), { // Overrides any defaults if values are provided\n            propertyName });\n        addEffectMetadataEntry(target, metadata);\n    });\n}\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getEffectDecoratorMetadata(instance) {\n    /** @type {?} */\n    const effectsDecorators = compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n    return effectsDecorators;\n}\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n * @template T\n * @param {?} sourceProto\n * @return {?}\n */\nfunction hasMetadataEntries(sourceProto) {\n    return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n/**\n * Add Effect Metadata to the Effect Class constructor under specific key\n * @template T\n * @param {?} sourceProto\n * @param {?} metadata\n * @return {?}\n */\nfunction addEffectMetadataEntry(sourceProto, metadata) {\n    if (hasMetadataEntries(sourceProto)) {\n        sourceProto.constructor[METADATA_KEY].push(metadata);\n    }\n    else {\n        Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n            value: [metadata],\n        });\n    }\n}\n/**\n * @template T\n * @param {?} sourceProto\n * @return {?}\n */\nfunction getEffectMetadataEntries(sourceProto) {\n    return hasMetadataEntries(sourceProto)\n        ? sourceProto.constructor[METADATA_KEY]\n        : [];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_metadata.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getEffectsMetadata(instance) {\n    return getSourceMetadata(instance).reduce((/**\n     * @param {?} acc\n     * @param {?} __1\n     * @return {?}\n     */\n    (acc, { propertyName, dispatch, useEffectsErrorHandler }) => {\n        acc[propertyName] = { dispatch, useEffectsErrorHandler };\n        return acc;\n    }), {});\n}\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getSourceMetadata(instance) {\n    /** @type {?} */\n    const effects = [\n        getEffectDecoratorMetadata,\n        getCreateEffectMetadata,\n    ];\n    return effects.reduce((/**\n     * @param {?} sources\n     * @param {?} source\n     * @return {?}\n     */\n    (sources, source) => sources.concat(source(instance))), []);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_resolver.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} sourceInstance\n * @param {?} globalErrorHandler\n * @param {?} effectsErrorHandler\n * @return {?}\n */\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n    /** @type {?} */\n    const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n    /** @type {?} */\n    const observables$ = getSourceMetadata(sourceInstance).map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ propertyName, dispatch, useEffectsErrorHandler, }) => {\n        /** @type {?} */\n        const observable$ = typeof sourceInstance[propertyName] === 'function'\n            ? sourceInstance[propertyName]()\n            : sourceInstance[propertyName];\n        /** @type {?} */\n        const effectAction$ = useEffectsErrorHandler\n            ? effectsErrorHandler(observable$, globalErrorHandler)\n            : observable$;\n        if (dispatch === false) {\n            return effectAction$.pipe(ignoreElements());\n        }\n        /** @type {?} */\n        const materialized$ = effectAction$.pipe(materialize());\n        return materialized$.pipe(map((/**\n         * @param {?} notification\n         * @return {?}\n         */\n        (notification) => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n        }))));\n    }));\n    return merge(...observables$);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_error_handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\n/**\n * @template T\n * @param {?} observable$\n * @param {?} errorHandler\n * @param {?=} retryAttemptLeft\n * @return {?}\n */\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n    return observable$.pipe(catchError((/**\n     * @param {?} error\n     * @return {?}\n     */\n    error => {\n        if (errorHandler)\n            errorHandler.handleError(error);\n        if (retryAttemptLeft <= 1) {\n            return observable$; // last attempt\n        }\n        // Return observable that produces this particular effect\n        return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n    })));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n */\nclass Actions extends Observable {\n    /**\n     * @param {?=} source\n     */\n    constructor(source) {\n        super();\n        if (source) {\n            this.source = source;\n        }\n    }\n    /**\n     * @template R\n     * @param {?} operator\n     * @return {?}\n     */\n    lift(operator) {\n        /** @type {?} */\n        const observable = new Actions();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n}\nActions.ɵfac = function Actions_Factory(t) { return new (t || Actions)(ɵngcc0.ɵɵinject(ScannedActionsSubject)); };\nActions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Actions, factory: Actions.ɵfac });\n/** @nocollapse */\nActions.ctorParameters = () => [\n    { type: Observable, decorators: [{ type: Inject, args: [ScannedActionsSubject,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Actions, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.Observable, decorators: [{\n                type: Inject,\n                args: [ScannedActionsSubject]\n            }] }]; }, null); })();\n/**\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofType(...allowedTypes) {\n    return filter((/**\n     * @param {?} action\n     * @return {?}\n     */\n    (action) => allowedTypes.some((/**\n     * @param {?} typeOrActionCreator\n     * @return {?}\n     */\n    typeOrActionCreator => {\n        if (typeof typeOrActionCreator === 'string') {\n            // Comparing the string to type\n            return typeOrActionCreator === action.type;\n        }\n        // We are filtering by ActionCreator\n        return typeOrActionCreator.type === action.type;\n    }))));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effect_notification.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction EffectNotification() { }\nif (false) {\n    /** @type {?} */\n    EffectNotification.prototype.effect;\n    /** @type {?} */\n    EffectNotification.prototype.propertyName;\n    /** @type {?} */\n    EffectNotification.prototype.sourceName;\n    /** @type {?} */\n    EffectNotification.prototype.sourceInstance;\n    /** @type {?} */\n    EffectNotification.prototype.notification;\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportInvalidActions(output, reporter) {\n    if (output.notification.kind === 'N') {\n        /** @type {?} */\n        const action = output.notification.value;\n        /** @type {?} */\n        const isInvalidAction = !isAction(action);\n        if (isInvalidAction) {\n            reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n        }\n    }\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction isAction(action) {\n    return (typeof action !== 'function' &&\n        action &&\n        action.type &&\n        typeof action.type === 'string');\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction getEffectName({ propertyName, sourceInstance, sourceName, }) {\n    /** @type {?} */\n    const isMethod = typeof sourceInstance[propertyName] === 'function';\n    return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction stringify(action) {\n    try {\n        return JSON.stringify(action);\n    }\n    catch (_a) {\n        return action;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/lifecycle_hooks.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isOnIdentifyEffects(instance) {\n    return isFunction(instance, onIdentifyEffectsKey);\n}\n/** @type {?} */\nconst onRunEffectsKey = 'ngrxOnRunEffects';\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isOnRunEffects(instance) {\n    return isFunction(instance, onRunEffectsKey);\n}\n/** @type {?} */\nconst onInitEffects = 'ngrxOnInitEffects';\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isOnInitEffects(instance) {\n    return isFunction(instance, onInitEffects);\n}\n/**\n * @param {?} instance\n * @param {?} functionName\n * @return {?}\n */\nfunction isFunction(instance, functionName) {\n    return (instance &&\n        functionName in instance &&\n        typeof instance[functionName] === 'function');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\n/** @type {?} */\nconst IMMEDIATE_EFFECTS = new InjectionToken('ngrx/effects: Immediate Effects');\n/** @type {?} */\nconst USER_PROVIDED_EFFECTS = new InjectionToken('ngrx/effects: User Provided Effects');\n/** @type {?} */\nconst _ROOT_EFFECTS = new InjectionToken('ngrx/effects: Internal Root Effects');\n/** @type {?} */\nconst ROOT_EFFECTS = new InjectionToken('ngrx/effects: Root Effects');\n/** @type {?} */\nconst _FEATURE_EFFECTS = new InjectionToken('ngrx/effects: Internal Feature Effects');\n/** @type {?} */\nconst FEATURE_EFFECTS = new InjectionToken('ngrx/effects: Feature Effects');\n/** @type {?} */\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('ngrx/effects: Effects Error Handler');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effect_sources.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EffectSources extends Subject {\n    /**\n     * @param {?} errorHandler\n     * @param {?} effectsErrorHandler\n     */\n    constructor(errorHandler, effectsErrorHandler) {\n        super();\n        this.errorHandler = errorHandler;\n        this.effectsErrorHandler = effectsErrorHandler;\n    }\n    /**\n     * @param {?} effectSourceInstance\n     * @return {?}\n     */\n    addEffects(effectSourceInstance) {\n        this.next(effectSourceInstance);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    toActions() {\n        return this.pipe(groupBy(getSourceForInstance), mergeMap((/**\n         * @param {?} source$\n         * @return {?}\n         */\n        source$ => {\n            return source$.pipe(groupBy(effectsInstance));\n        })), mergeMap((/**\n         * @param {?} source$\n         * @return {?}\n         */\n        source$ => {\n            /** @type {?} */\n            const effect$ = source$.pipe(exhaustMap((/**\n             * @param {?} sourceInstance\n             * @return {?}\n             */\n            sourceInstance => {\n                return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n            })), map((/**\n             * @param {?} output\n             * @return {?}\n             */\n            output => {\n                reportInvalidActions(output, this.errorHandler);\n                return output.notification;\n            })), filter((/**\n             * @param {?} notification\n             * @return {?}\n             */\n            (notification) => notification.kind === 'N')), dematerialize());\n            // start the stream with an INIT action\n            // do this only for the first Effect instance\n            /** @type {?} */\n            const init$ = source$.pipe(take(1), filter(isOnInitEffects), map((/**\n             * @param {?} instance\n             * @return {?}\n             */\n            instance => instance.ngrxOnInitEffects())));\n            return merge(effect$, init$);\n        })));\n    }\n}\nEffectSources.ɵfac = function EffectSources_Factory(t) { return new (t || EffectSources)(ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(EFFECTS_ERROR_HANDLER)); };\nEffectSources.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: EffectSources, factory: EffectSources.ɵfac });\n/** @nocollapse */\nEffectSources.ctorParameters = () => [\n    { type: ErrorHandler },\n    { type: undefined, decorators: [{ type: Inject, args: [EFFECTS_ERROR_HANDLER,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EffectSources, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.ErrorHandler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [EFFECTS_ERROR_HANDLER]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EffectSources.prototype.errorHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    EffectSources.prototype.effectsErrorHandler;\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nfunction effectsInstance(sourceInstance) {\n    if (isOnIdentifyEffects(sourceInstance)) {\n        return sourceInstance.ngrxOnIdentifyEffects();\n    }\n    return '';\n}\n/**\n * @param {?} errorHandler\n * @param {?} effectsErrorHandler\n * @return {?}\n */\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n    return (/**\n     * @param {?} sourceInstance\n     * @return {?}\n     */\n    sourceInstance => {\n        /** @type {?} */\n        const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n        if (isOnRunEffects(sourceInstance)) {\n            return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n        }\n        return mergedEffects$;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_runner.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EffectsRunner {\n    /**\n     * @param {?} effectSources\n     * @param {?} store\n     */\n    constructor(effectSources, store) {\n        this.effectSources = effectSources;\n        this.store = store;\n        this.effectsSubscription = null;\n    }\n    /**\n     * @return {?}\n     */\n    start() {\n        if (!this.effectsSubscription) {\n            this.effectsSubscription = this.effectSources\n                .toActions()\n                .subscribe(this.store);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.effectsSubscription) {\n            this.effectsSubscription.unsubscribe();\n            this.effectsSubscription = null;\n        }\n    }\n}\nEffectsRunner.ɵfac = function EffectsRunner_Factory(t) { return new (t || EffectsRunner)(ɵngcc0.ɵɵinject(EffectSources), ɵngcc0.ɵɵinject(ɵngcc2.Store)); };\nEffectsRunner.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: EffectsRunner, factory: EffectsRunner.ɵfac });\n/** @nocollapse */\nEffectsRunner.ctorParameters = () => [\n    { type: EffectSources },\n    { type: Store }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EffectsRunner, [{\n        type: Injectable\n    }], function () { return [{ type: EffectSources }, { type: ɵngcc2.Store }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EffectsRunner.prototype.effectsSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    EffectsRunner.prototype.effectSources;\n    /**\n     * @type {?}\n     * @private\n     */\n    EffectsRunner.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_root_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n/** @type {?} */\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\nclass EffectsRootModule {\n    /**\n     * @param {?} sources\n     * @param {?} runner\n     * @param {?} store\n     * @param {?} rootEffects\n     * @param {?} storeRootModule\n     * @param {?} storeFeatureModule\n     * @param {?} guard\n     */\n    constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n        this.sources = sources;\n        runner.start();\n        rootEffects.forEach((/**\n         * @param {?} effectSourceInstance\n         * @return {?}\n         */\n        effectSourceInstance => sources.addEffects(effectSourceInstance)));\n        store.dispatch({ type: ROOT_EFFECTS_INIT });\n    }\n    /**\n     * @param {?} effectSourceInstance\n     * @return {?}\n     */\n    addEffects(effectSourceInstance) {\n        this.sources.addEffects(effectSourceInstance);\n    }\n}\nEffectsRootModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: EffectsRootModule });\nEffectsRootModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function EffectsRootModule_Factory(t) { return new (t || EffectsRootModule)(ɵngcc0.ɵɵinject(EffectSources), ɵngcc0.ɵɵinject(EffectsRunner), ɵngcc0.ɵɵinject(ɵngcc2.Store), ɵngcc0.ɵɵinject(ROOT_EFFECTS), ɵngcc0.ɵɵinject(ɵngcc2.StoreRootModule, 8), ɵngcc0.ɵɵinject(ɵngcc2.StoreFeatureModule, 8), ɵngcc0.ɵɵinject(_ROOT_EFFECTS_GUARD, 8)); } });\n/** @nocollapse */\nEffectsRootModule.ctorParameters = () => [\n    { type: EffectSources },\n    { type: EffectsRunner },\n    { type: Store },\n    { type: Array, decorators: [{ type: Inject, args: [ROOT_EFFECTS,] }] },\n    { type: StoreRootModule, decorators: [{ type: Optional }] },\n    { type: StoreFeatureModule, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_ROOT_EFFECTS_GUARD,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EffectsRootModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: EffectSources }, { type: EffectsRunner }, { type: ɵngcc2.Store }, { type: Array, decorators: [{\n                type: Inject,\n                args: [ROOT_EFFECTS]\n            }] }, { type: ɵngcc2.StoreRootModule, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.StoreFeatureModule, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [_ROOT_EFFECTS_GUARD]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EffectsRootModule.prototype.sources;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_feature_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EffectsFeatureModule {\n    /**\n     * @param {?} root\n     * @param {?} effectSourceGroups\n     * @param {?} storeRootModule\n     * @param {?} storeFeatureModule\n     */\n    constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n        effectSourceGroups.forEach((/**\n         * @param {?} group\n         * @return {?}\n         */\n        group => group.forEach((/**\n         * @param {?} effectSourceInstance\n         * @return {?}\n         */\n        effectSourceInstance => root.addEffects(effectSourceInstance)))));\n    }\n}\nEffectsFeatureModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: EffectsFeatureModule });\nEffectsFeatureModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function EffectsFeatureModule_Factory(t) { return new (t || EffectsFeatureModule)(ɵngcc0.ɵɵinject(EffectsRootModule), ɵngcc0.ɵɵinject(FEATURE_EFFECTS), ɵngcc0.ɵɵinject(ɵngcc2.StoreRootModule, 8), ɵngcc0.ɵɵinject(ɵngcc2.StoreFeatureModule, 8)); } });\n/** @nocollapse */\nEffectsFeatureModule.ctorParameters = () => [\n    { type: EffectsRootModule },\n    { type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS,] }] },\n    { type: StoreRootModule, decorators: [{ type: Optional }] },\n    { type: StoreFeatureModule, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EffectsFeatureModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: EffectsRootModule }, { type: Array, decorators: [{\n                type: Inject,\n                args: [FEATURE_EFFECTS]\n            }] }, { type: ɵngcc2.StoreRootModule, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.StoreFeatureModule, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/effects_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EffectsModule {\n    /**\n     * @param {?=} featureEffects\n     * @return {?}\n     */\n    static forFeature(featureEffects = []) {\n        return {\n            ngModule: EffectsFeatureModule,\n            providers: [\n                featureEffects,\n                {\n                    provide: _FEATURE_EFFECTS,\n                    multi: true,\n                    useValue: featureEffects,\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: FEATURE_EFFECTS,\n                    multi: true,\n                    useFactory: createEffects,\n                    deps: [Injector, _FEATURE_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n    /**\n     * @param {?=} rootEffects\n     * @return {?}\n     */\n    static forRoot(rootEffects = []) {\n        return {\n            ngModule: EffectsRootModule,\n            providers: [\n                {\n                    provide: _ROOT_EFFECTS_GUARD,\n                    useFactory: _provideForRootGuard,\n                    deps: [[EffectsRunner, new Optional(), new SkipSelf()]],\n                },\n                {\n                    provide: EFFECTS_ERROR_HANDLER,\n                    useValue: defaultEffectsErrorHandler,\n                },\n                EffectsRunner,\n                EffectSources,\n                Actions,\n                rootEffects,\n                {\n                    provide: _ROOT_EFFECTS,\n                    useValue: [rootEffects],\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: ROOT_EFFECTS,\n                    useFactory: createEffects,\n                    deps: [Injector, _ROOT_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n}\nEffectsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: EffectsModule });\nEffectsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function EffectsModule_Factory(t) { return new (t || EffectsModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EffectsModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n/**\n * @param {?} injector\n * @param {?} effectGroups\n * @param {?} userProvidedEffectGroups\n * @return {?}\n */\nfunction createEffects(injector, effectGroups, userProvidedEffectGroups) {\n    /** @type {?} */\n    const mergedEffects = [];\n    for (let effectGroup of effectGroups) {\n        mergedEffects.push(...effectGroup);\n    }\n    for (let userProvidedEffectGroup of userProvidedEffectGroups) {\n        mergedEffects.push(...userProvidedEffectGroup);\n    }\n    return createEffectInstances(injector, mergedEffects);\n}\n/**\n * @param {?} injector\n * @param {?} effects\n * @return {?}\n */\nfunction createEffectInstances(injector, effects) {\n    return effects.map((/**\n     * @param {?} effect\n     * @return {?}\n     */\n    effect => injector.get(effect)));\n}\n/**\n * @param {?} runner\n * @return {?}\n */\nfunction _provideForRootGuard(runner) {\n    if (runner) {\n        throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n    }\n    return 'guarded';\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/act.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents config with named paratemeters for act\n * @record\n * @template Input, OutputAction, ErrorAction, CompleteAction, UnsubscribeAction\n */\nfunction ActConfig() { }\nif (false) {\n    /** @type {?} */\n    ActConfig.prototype.project;\n    /** @type {?} */\n    ActConfig.prototype.error;\n    /** @type {?|undefined} */\n    ActConfig.prototype.complete;\n    /** @type {?|undefined} */\n    ActConfig.prototype.operator;\n    /** @type {?|undefined} */\n    ActConfig.prototype.unsubscribe;\n}\n/**\n * @template Input, OutputAction, ErrorAction, CompleteAction, UnsubscribeAction\n * @param {?} configOrProject\n * @param {?=} errorFn\n * @return {?}\n */\nfunction act(\n/** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n    const { project, error, complete, operator, unsubscribe } = typeof configOrProject === 'function'\n        ? {\n            project: configOrProject,\n            error: (/** @type {?} */ (errorFn)),\n            operator: concatMap,\n            complete: undefined,\n            unsubscribe: undefined,\n        }\n        : Object.assign(Object.assign({}, configOrProject), { operator: configOrProject.operator || concatMap });\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    source => defer((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const subject = new Subject();\n        return merge(source.pipe(operator((/**\n         * @param {?} input\n         * @param {?} index\n         * @return {?}\n         */\n        (input, index) => defer((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let completed = false;\n            /** @type {?} */\n            let errored = false;\n            /** @type {?} */\n            let projectedCount = 0;\n            return project(input, index).pipe(materialize(), map((/**\n             * @param {?} notification\n             * @return {?}\n             */\n            (notification) => {\n                switch (notification.kind) {\n                    case 'E':\n                        errored = true;\n                        return new Notification((/** @type {?} */ (\n                        // TODO: remove any in RxJS 6.5\n                        'N')), error(notification.error, input));\n                    case 'C':\n                        completed = true;\n                        return complete\n                            ? new Notification((/** @type {?} */ (\n                            // TODO: remove any in RxJS 6.5\n                            'N')), complete(projectedCount, input))\n                            : undefined;\n                    default:\n                        ++projectedCount;\n                        return notification;\n                }\n            })), filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            (n) => n != null)), dematerialize(), finalize((/**\n             * @return {?}\n             */\n            () => {\n                if (!completed && !errored && unsubscribe) {\n                    subject.next(unsubscribe(projectedCount, input));\n                }\n            })));\n        }))))), subject);\n    })));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/effects/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Actions, EFFECTS_ERROR_HANDLER, Effect, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, rootEffectsInit, getSourceMetadata as ɵngrx_modules_effects_effects_a, createEffects as ɵngrx_modules_effects_effects_b, _provideForRootGuard as ɵngrx_modules_effects_effects_c, _ROOT_EFFECTS_GUARD as ɵngrx_modules_effects_effects_d, _ROOT_EFFECTS as ɵngrx_modules_effects_effects_e, ROOT_EFFECTS as ɵngrx_modules_effects_effects_f, _FEATURE_EFFECTS as ɵngrx_modules_effects_effects_g, FEATURE_EFFECTS as ɵngrx_modules_effects_effects_h };\n\n//# sourceMappingURL=effects.js.map","/**\n * @license NgRx 9.1.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/entity_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n * @return {?}\n */\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\n/**\n * @template V\n * @return {?}\n */\nfunction createInitialStateFactory() {\n    /**\n     * @param {?=} additionalState\n     * @return {?}\n     */\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/state_selectors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @return {?}\n */\nfunction createSelectorsFactory() {\n    /**\n     * @param {?=} selectState\n     * @return {?}\n     */\n    function getSelectors(selectState) {\n        /** @type {?} */\n        const selectIds = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.ids);\n        /** @type {?} */\n        const selectEntities = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.entities);\n        /** @type {?} */\n        const selectAll = createSelector(selectIds, selectEntities, (/**\n         * @param {?} ids\n         * @param {?} entities\n         * @return {?}\n         */\n        (ids, entities) => ids.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => ((/** @type {?} */ (entities)))[id]))));\n        /** @type {?} */\n        const selectTotal = createSelector(selectIds, (/**\n         * @param {?} ids\n         * @return {?}\n         */\n        ids => ids.length));\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst DidMutate = {\n    EntitiesOnly: 0,\n    Both: 1,\n    None: 2,\n};\nDidMutate[DidMutate.EntitiesOnly] = 'EntitiesOnly';\nDidMutate[DidMutate.Both] = 'Both';\nDidMutate[DidMutate.None] = 'None';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nfunction createStateOperator(mutator) {\n    return (/**\n     * @template S\n     * @param {?} arg\n     * @param {?} state\n     * @return {?}\n     */\n    function operation(arg, state) {\n        /** @type {?} */\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: Object.assign({}, state.entities),\n        };\n        /** @type {?} */\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return Object.assign(Object.assign({}, state), { entities: clonedEntityState.entities });\n        }\n        return state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} entity\n * @param {?} selectId\n * @return {?}\n */\nfunction selectIdValue(entity, selectId) {\n    /** @type {?} */\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/unsorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nfunction createUnsortedStateAdapter(selectId) {\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(entities, state) {\n        /** @type {?} */\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            state.entities[key] = entity;\n            return DidMutate.EntitiesOnly;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    /**\n     * @param {?} keysOrPredicate\n     * @param {?} state\n     * @return {?}\n     */\n    function removeManyMutably(keysOrPredicate, state) {\n        /** @type {?} */\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => keysOrPredicate(state.entities[key])));\n        /** @type {?} */\n        const didMutate = keys\n            .filter((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => key in state.entities))\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => delete state.entities[key])).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @return {?}\n             */\n            (id) => id in state.entities));\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    /**\n     * @param {?} keys\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeNewKey(keys, update, state) {\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        /** @type {?} */\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const newKeys = {};\n        updates = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => update.id in state.entities));\n        /** @type {?} */\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            /** @type {?} */\n            const didMutateIds = updates.filter((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => takeNewKey(newKeys, update, state))).length > 0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((/**\n                 * @param {?} id\n                 * @return {?}\n                 */\n                (id) => newKeys[id] || id));\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    /**\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(map, state) {\n        /** @type {?} */\n        const changes = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        /** @type {?} */\n        const updates = changes.filter((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ id }) => id in state.entities));\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/sorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    /**\n     * @param {?} newModels\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(newModels, state) {\n        /** @type {?} */\n        const models = newModels.filter((/**\n         * @param {?} model\n         * @return {?}\n         */\n        model => !(selectIdValue(model, selectId) in state.entities)));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            state.ids = state.ids.filter((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => val !== id));\n            merge([entity], state);\n            return DidMutate.Both;\n        }\n        else {\n            return addOneMutably(entity, state);\n        }\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} models\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const models = [];\n        /** @type {?} */\n        const didMutateIds = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => takeUpdatedModel(models, update, state))).length >\n            0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            /** @type {?} */\n            const originalIds = state.ids;\n            /** @type {?} */\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @param {?} index\n             * @return {?}\n             */\n            (id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            }));\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((/**\n                 * @param {?} i\n                 * @return {?}\n                 */\n                (i) => state.ids[i] === originalIds[i]))) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    /**\n     * @param {?} updatesOrMap\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(updatesOrMap, state) {\n        /** @type {?} */\n        const updates = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function merge(models, state) {\n        models.sort(sort);\n        /** @type {?} */\n        const ids = [];\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            /** @type {?} */\n            const model = models[i];\n            /** @type {?} */\n            const modelId = selectIdValue(model, selectId);\n            /** @type {?} */\n            const entityId = state.ids[j];\n            /** @type {?} */\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((/**\n         * @param {?} model\n         * @param {?} i\n         * @return {?}\n         */\n        (model, i) => {\n            state.entities[selectId(model)] = model;\n        }));\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/create_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = Object.assign({ sortComparer: false, selectId: (/**\n         * @param {?} instance\n         * @return {?}\n         */\n        (instance) => instance.id) }, options);\n    /** @type {?} */\n    const stateFactory = createInitialStateFactory();\n    /** @type {?} */\n    const selectorsFactory = createSelectorsFactory();\n    /** @type {?} */\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return Object.assign(Object.assign(Object.assign({ selectId,\n        sortComparer }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/models.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction DictionaryNum() { }\n/**\n * @abstract\n * @template T\n */\nclass Dictionary {\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateStr() { }\nif (false) {\n    /** @type {?} */\n    UpdateStr.prototype.id;\n    /** @type {?} */\n    UpdateStr.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateNum() { }\nif (false) {\n    /** @type {?} */\n    UpdateNum.prototype.id;\n    /** @type {?} */\n    UpdateNum.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityState() { }\nif (false) {\n    /** @type {?} */\n    EntityState.prototype.ids;\n    /** @type {?} */\n    EntityState.prototype.entities;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityDefinition() { }\nif (false) {\n    /** @type {?} */\n    EntityDefinition.prototype.selectId;\n    /** @type {?} */\n    EntityDefinition.prototype.sortComparer;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityStateAdapter() { }\nif (false) {\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addMany = function (entities, state) { };\n    /**\n     * @deprecated addAll has been renamed. Use setAll instead.\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} predicate\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (predicate, state) { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeAll = function (state) { };\n    /**\n     * @template S\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateOne = function (update, state) { };\n    /**\n     * @template S\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateMany = function (updates, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertMany = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.map = function (map, state) { };\n}\n/**\n * @record\n * @template T, V\n */\nfunction EntitySelectors() { }\nif (false) {\n    /** @type {?} */\n    EntitySelectors.prototype.selectIds;\n    /** @type {?} */\n    EntitySelectors.prototype.selectEntities;\n    /** @type {?} */\n    EntitySelectors.prototype.selectAll;\n    /** @type {?} */\n    EntitySelectors.prototype.selectTotal;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityAdapter() { }\nif (false) {\n    /** @type {?} */\n    EntityAdapter.prototype.selectId;\n    /** @type {?} */\n    EntityAdapter.prototype.sortComparer;\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function () { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function (state) { };\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function () { };\n    /**\n     * @template V\n     * @param {?} selectState\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function (selectState) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dictionary, createEntityAdapter };\n\n//# sourceMappingURL=entity.js.map","/**\n * @license NgRx 9.1.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { Injectable, InjectionToken, Inject, isDevMode, NgZone, NgModule, Optional, SkipSelf, Injector } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, queueScheduler } from 'rxjs';\nimport { observeOn, withLatestFrom, scan, pluck, map, distinctUntilChanged } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/action_creator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * \\@usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n * @template T, C\n * @param {?} type Describes the action that will be dispatched\n * @param {?=} config Additional metadata needed for the handling of the action.  See {\\@link createAction#usage-notes Usage Notes}.\n *\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction createAction(type, config) {\n    if (typeof config === 'function') {\n        return defineType(type, (/**\n         * @param {...?} args\n         * @return {?}\n         */\n        (...args) => (Object.assign(Object.assign({}, config(...args)), { type }))));\n    }\n    /** @type {?} */\n    const as = config ? config._as : 'empty';\n    switch (as) {\n        case 'empty':\n            return defineType(type, (/**\n             * @return {?}\n             */\n            () => ({ type })));\n        case 'props':\n            return defineType(type, (/**\n             * @param {?} props\n             * @return {?}\n             */\n            (props) => (Object.assign(Object.assign({}, props), { type }))));\n        default:\n            throw new Error('Unexpected config.');\n    }\n}\n/**\n * @template P\n * @return {?}\n */\nfunction props() {\n    return { _as: 'props', _p: (/** @type {?} */ (undefined)) };\n}\n/**\n * @template C\n * @param {?} creators\n * @return {?}\n */\nfunction union(creators) {\n    return (/** @type {?} */ (undefined));\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} creator\n * @return {?}\n */\nfunction defineType(type, creator) {\n    return Object.defineProperty(creator, 'type', {\n        value: type,\n        writable: false,\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/actions_subject.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INIT = (/** @type {?} */ ('@ngrx/store/init'));\nclass ActionsSubject extends BehaviorSubject {\n    constructor() {\n        super({ type: INIT });\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    next(action) {\n        if (typeof action === 'function') {\n            throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n        }\n        else if (typeof action === 'undefined') {\n            throw new TypeError(`Actions must be objects`);\n        }\n        else if (typeof action.type === 'undefined') {\n            throw new TypeError(`Actions must have a type property`);\n        }\n        super.next(action);\n    }\n    /**\n     * @return {?}\n     */\n    complete() {\n        /* noop */\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.complete();\n    }\n}\nActionsSubject.ɵfac = function ActionsSubject_Factory(t) { return new (t || ActionsSubject)(); };\nActionsSubject.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ActionsSubject, factory: ActionsSubject.ɵfac });\n/** @nocollapse */\nActionsSubject.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ActionsSubject, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/** @type {?} */\nconst ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _ROOT_STORE_GUARD = new InjectionToken('@ngrx/store Internal Root Guard');\n/** @type {?} */\nconst _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');\n/** @type {?} */\nconst INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\n/** @type {?} */\nconst REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');\n/** @type {?} */\nconst _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');\n/** @type {?} */\nconst INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');\n/** @type {?} */\nconst _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');\n/** @type {?} */\nconst STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\n/** @type {?} */\nconst _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');\n/** @type {?} */\nconst _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');\n/** @type {?} */\nconst _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');\n/** @type {?} */\nconst _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');\n/** @type {?} */\nconst _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');\n/** @type {?} */\nconst FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n * @type {?}\n */\nconst USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');\n/**\n * Meta reducers defined either internally by \\@ngrx/store or by library authors\n * @type {?}\n */\nconst META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n * @type {?}\n */\nconst _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n * @type {?}\n */\nconst USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store User Runtime Checks Config');\n/**\n * Runtime checks defined by the user via forRoot()\n * @type {?}\n */\nconst _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');\n/**\n * Runtime checks currently in use\n * @type {?}\n */\nconst _ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} reducers\n * @param {?=} initialState\n * @return {?}\n */\nfunction combineReducers(reducers, initialState = {}) {\n    /** @type {?} */\n    const reducerKeys = Object.keys(reducers);\n    /** @type {?} */\n    const finalReducers = {};\n    for (let i = 0; i < reducerKeys.length; i++) {\n        /** @type {?} */\n        const key = reducerKeys[i];\n        if (typeof reducers[key] === 'function') {\n            finalReducers[key] = reducers[key];\n        }\n    }\n    /** @type {?} */\n    const finalReducerKeys = Object.keys(finalReducers);\n    return (/**\n     * @param {?} state\n     * @param {?} action\n     * @return {?}\n     */\n    function combination(state, action) {\n        state = state === undefined ? initialState : state;\n        /** @type {?} */\n        let hasChanged = false;\n        /** @type {?} */\n        const nextState = {};\n        for (let i = 0; i < finalReducerKeys.length; i++) {\n            /** @type {?} */\n            const key = finalReducerKeys[i];\n            /** @type {?} */\n            const reducer = finalReducers[key];\n            /** @type {?} */\n            const previousStateForKey = state[key];\n            /** @type {?} */\n            const nextStateForKey = reducer(previousStateForKey, action);\n            nextState[key] = nextStateForKey;\n            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n        }\n        return hasChanged ? nextState : state;\n    });\n}\n/**\n * @template T\n * @param {?} object\n * @param {?} keyToRemove\n * @return {?}\n */\nfunction omit(object, keyToRemove) {\n    return Object.keys(object)\n        .filter((/**\n     * @param {?} key\n     * @return {?}\n     */\n    key => key !== keyToRemove))\n        .reduce((/**\n     * @param {?} result\n     * @param {?} key\n     * @return {?}\n     */\n    (result, key) => Object.assign(result, { [key]: object[key] })), {});\n}\n/**\n * @param {...?} functions\n * @return {?}\n */\nfunction compose(...functions) {\n    return (/**\n     * @param {?} arg\n     * @return {?}\n     */\n    function (arg) {\n        if (functions.length === 0) {\n            return arg;\n        }\n        /** @type {?} */\n        const last = functions[functions.length - 1];\n        /** @type {?} */\n        const rest = functions.slice(0, -1);\n        return rest.reduceRight((/**\n         * @param {?} composed\n         * @param {?} fn\n         * @return {?}\n         */\n        (composed, fn) => fn(composed)), last(arg));\n    });\n}\n/**\n * @template T, V\n * @param {?} reducerFactory\n * @param {?=} metaReducers\n * @return {?}\n */\nfunction createReducerFactory(reducerFactory, metaReducers) {\n    if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n        ((/** @type {?} */ (reducerFactory))) = compose.apply(null, [\n            ...metaReducers,\n            reducerFactory,\n        ]);\n    }\n    return (/**\n     * @param {?} reducers\n     * @param {?=} initialState\n     * @return {?}\n     */\n    (reducers, initialState) => {\n        /** @type {?} */\n        const reducer = reducerFactory(reducers);\n        return (/**\n         * @param {?} state\n         * @param {?} action\n         * @return {?}\n         */\n        (state, action) => {\n            state = state === undefined ? ((/** @type {?} */ (initialState))) : state;\n            return reducer(state, action);\n        });\n    });\n}\n/**\n * @template T, V\n * @param {?=} metaReducers\n * @return {?}\n */\nfunction createFeatureReducerFactory(metaReducers) {\n    /** @type {?} */\n    const reducerFactory = Array.isArray(metaReducers) && metaReducers.length > 0\n        ? compose(...metaReducers)\n        : (/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => r);\n    return (/**\n     * @param {?} reducer\n     * @param {?=} initialState\n     * @return {?}\n     */\n    (reducer, initialState) => {\n        reducer = reducerFactory(reducer);\n        return (/**\n         * @param {?} state\n         * @param {?} action\n         * @return {?}\n         */\n        (state, action) => {\n            state = state === undefined ? initialState : state;\n            return reducer(state, action);\n        });\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/reducer_manager.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass ReducerObservable extends Observable {\n}\n/**\n * @abstract\n */\nclass ReducerManagerDispatcher extends ActionsSubject {\n}\n/** @type {?} */\nconst UPDATE = (/** @type {?} */ ('@ngrx/store/update-reducers'));\nclass ReducerManager extends BehaviorSubject {\n    /**\n     * @param {?} dispatcher\n     * @param {?} initialState\n     * @param {?} reducers\n     * @param {?} reducerFactory\n     */\n    constructor(dispatcher, initialState, reducers, reducerFactory) {\n        super(reducerFactory(reducers, initialState));\n        this.dispatcher = dispatcher;\n        this.initialState = initialState;\n        this.reducers = reducers;\n        this.reducerFactory = reducerFactory;\n    }\n    /**\n     * @param {?} feature\n     * @return {?}\n     */\n    addFeature(feature) {\n        this.addFeatures([feature]);\n    }\n    /**\n     * @param {?} features\n     * @return {?}\n     */\n    addFeatures(features) {\n        /** @type {?} */\n        const reducers = features.reduce((/**\n         * @param {?} reducerDict\n         * @param {?} __1\n         * @return {?}\n         */\n        (reducerDict, { reducers, reducerFactory, metaReducers, initialState, key }) => {\n            /** @type {?} */\n            const reducer = typeof reducers === 'function'\n                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)\n                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n            reducerDict[key] = reducer;\n            return reducerDict;\n        }), (/** @type {?} */ ({})));\n        this.addReducers(reducers);\n    }\n    /**\n     * @param {?} feature\n     * @return {?}\n     */\n    removeFeature(feature) {\n        this.removeFeatures([feature]);\n    }\n    /**\n     * @param {?} features\n     * @return {?}\n     */\n    removeFeatures(features) {\n        this.removeReducers(features.map((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => p.key)));\n    }\n    /**\n     * @param {?} key\n     * @param {?} reducer\n     * @return {?}\n     */\n    addReducer(key, reducer) {\n        this.addReducers({ [key]: reducer });\n    }\n    /**\n     * @param {?} reducers\n     * @return {?}\n     */\n    addReducers(reducers) {\n        this.reducers = Object.assign(Object.assign({}, this.reducers), reducers);\n        this.updateReducers(Object.keys(reducers));\n    }\n    /**\n     * @param {?} featureKey\n     * @return {?}\n     */\n    removeReducer(featureKey) {\n        this.removeReducers([featureKey]);\n    }\n    /**\n     * @param {?} featureKeys\n     * @return {?}\n     */\n    removeReducers(featureKeys) {\n        featureKeys.forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.reducers = (/** @type {?} */ (omit(this.reducers, key) /*TODO(#823)*/));\n        }));\n        this.updateReducers(featureKeys);\n    }\n    /**\n     * @private\n     * @param {?} featureKeys\n     * @return {?}\n     */\n    updateReducers(featureKeys) {\n        this.next(this.reducerFactory(this.reducers, this.initialState));\n        this.dispatcher.next((/** @type {?} */ ({\n            type: UPDATE,\n            features: featureKeys,\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.complete();\n    }\n}\nReducerManager.ɵfac = function ReducerManager_Factory(t) { return new (t || ReducerManager)(ɵngcc0.ɵɵinject(ReducerManagerDispatcher), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(INITIAL_REDUCERS), ɵngcc0.ɵɵinject(REDUCER_FACTORY)); };\nReducerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReducerManager, factory: ReducerManager.ɵfac });\n/** @nocollapse */\nReducerManager.ctorParameters = () => [\n    { type: ReducerManagerDispatcher },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReducerManager, [{\n        type: Injectable\n    }], function () { return [{ type: ReducerManagerDispatcher }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [INITIAL_STATE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [INITIAL_REDUCERS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [REDUCER_FACTORY]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ReducerManager.prototype.dispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    ReducerManager.prototype.initialState;\n    /**\n     * @type {?}\n     * @private\n     */\n    ReducerManager.prototype.reducers;\n    /**\n     * @type {?}\n     * @private\n     */\n    ReducerManager.prototype.reducerFactory;\n}\n/** @type {?} */\nconst REDUCER_MANAGER_PROVIDERS = [\n    ReducerManager,\n    { provide: ReducerObservable, useExisting: ReducerManager },\n    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/scanned_actions_subject.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScannedActionsSubject extends Subject {\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.complete();\n    }\n}\nScannedActionsSubject.ɵfac = function ScannedActionsSubject_Factory(t) { return ɵScannedActionsSubject_BaseFactory(t || ScannedActionsSubject); };\nScannedActionsSubject.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScannedActionsSubject, factory: ScannedActionsSubject.ɵfac });\nconst ɵScannedActionsSubject_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(ScannedActionsSubject);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScannedActionsSubject, [{\n        type: Injectable\n    }], null, null); })();\n/** @type {?} */\nconst SCANNED_ACTIONS_SUBJECT_PROVIDERS = [\n    ScannedActionsSubject,\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass StateObservable extends Observable {\n}\n/**\n * @template T\n */\nclass State extends BehaviorSubject {\n    /**\n     * @param {?} actions$\n     * @param {?} reducer$\n     * @param {?} scannedActions\n     * @param {?} initialState\n     */\n    constructor(actions$, reducer$, scannedActions, initialState) {\n        super(initialState);\n        /** @type {?} */\n        const actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));\n        /** @type {?} */\n        const withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n        /** @type {?} */\n        const seed = { state: initialState };\n        /** @type {?} */\n        const stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));\n        this.stateSubscription = stateAndAction$.subscribe((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ state, action }) => {\n            this.next(state);\n            scannedActions.next(action);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateSubscription.unsubscribe();\n        this.complete();\n    }\n}\nState.ɵfac = function State_Factory(t) { return new (t || State)(ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerObservable), ɵngcc0.ɵɵinject(ScannedActionsSubject), ɵngcc0.ɵɵinject(INITIAL_STATE)); };\nState.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: State, factory: State.ɵfac });\nState.INIT = INIT;\n/** @nocollapse */\nState.ctorParameters = () => [\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: ScannedActionsSubject },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(State, [{\n        type: Injectable\n    }], function () { return [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [INITIAL_STATE]\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    State.INIT;\n    /**\n     * @type {?}\n     * @private\n     */\n    State.prototype.stateSubscription;\n}\n/**\n * @template T, V\n * @param {?=} stateActionPair\n * @param {?=} __1\n * @return {?}\n */\nfunction reduceState(stateActionPair = { state: undefined }, [action, reducer]) {\n    const { state } = stateActionPair;\n    return { state: reducer(state, action), action };\n}\n/** @type {?} */\nconst STATE_PROVIDERS = [\n    State,\n    { provide: StateObservable, useExisting: State },\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass Store extends Observable {\n    /**\n     * @param {?} state$\n     * @param {?} actionsObserver\n     * @param {?} reducerManager\n     */\n    constructor(state$, actionsObserver, reducerManager) {\n        super();\n        this.actionsObserver = actionsObserver;\n        this.reducerManager = reducerManager;\n        this.source = state$;\n    }\n    /**\n     * @template Props, K\n     * @param {?} pathOrMapFn\n     * @param {...?} paths\n     * @return {?}\n     */\n    select(pathOrMapFn, ...paths) {\n        return ((/** @type {?} */ (select))).call(null, pathOrMapFn, ...paths)(this);\n    }\n    /**\n     * @template R\n     * @param {?} operator\n     * @return {?}\n     */\n    lift(operator) {\n        /** @type {?} */\n        const store = new Store(this, this.actionsObserver, this.reducerManager);\n        store.operator = operator;\n        return store;\n    }\n    /**\n     * @template V\n     * @param {?} action\n     * @return {?}\n     */\n    dispatch(action) {\n        this.actionsObserver.next(action);\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    next(action) {\n        this.actionsObserver.next(action);\n    }\n    /**\n     * @param {?} err\n     * @return {?}\n     */\n    error(err) {\n        this.actionsObserver.error(err);\n    }\n    /**\n     * @return {?}\n     */\n    complete() {\n        this.actionsObserver.complete();\n    }\n    /**\n     * @template State, Actions\n     * @param {?} key\n     * @param {?} reducer\n     * @return {?}\n     */\n    addReducer(key, reducer) {\n        this.reducerManager.addReducer(key, reducer);\n    }\n    /**\n     * @template Key\n     * @param {?} key\n     * @return {?}\n     */\n    removeReducer(key) {\n        this.reducerManager.removeReducer(key);\n    }\n}\nStore.ɵfac = function Store_Factory(t) { return new (t || Store)(ɵngcc0.ɵɵinject(StateObservable), ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerManager)); };\nStore.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Store, factory: Store.ɵfac });\n/** @nocollapse */\nStore.ctorParameters = () => [\n    { type: StateObservable },\n    { type: ActionsSubject },\n    { type: ReducerManager }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Store, [{\n        type: Injectable\n    }], function () { return [{ type: StateObservable }, { type: ActionsSubject }, { type: ReducerManager }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype.actionsObserver;\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype.reducerManager;\n}\n/** @type {?} */\nconst STORE_PROVIDERS = [Store];\n/**\n * @template T, Props, K\n * @param {?} pathOrMapFn\n * @param {?=} propsOrPath\n * @param {...?} paths\n * @return {?}\n */\nfunction select(pathOrMapFn, propsOrPath, ...paths) {\n    return (/**\n     * @param {?} source$\n     * @return {?}\n     */\n    function selectOperator(source$) {\n        /** @type {?} */\n        let mapped$;\n        if (typeof pathOrMapFn === 'string') {\n            /** @type {?} */\n            const pathSlices = [(/** @type {?} */ (propsOrPath)), ...paths].filter(Boolean);\n            mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n        }\n        else if (typeof pathOrMapFn === 'function') {\n            mapped$ = source$.pipe(map((/**\n             * @param {?} source\n             * @return {?}\n             */\n            source => pathOrMapFn(source, (/** @type {?} */ (propsOrPath))))));\n        }\n        else {\n            throw new TypeError(`Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n                ` expected 'string' or 'function'`);\n        }\n        return mapped$.pipe(distinctUntilChanged());\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/selector.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template State, Result, ProjectorFn\n */\nfunction MemoizedSelector() { }\nif (false) {\n    /** @type {?} */\n    MemoizedSelector.prototype.projector;\n    /** @type {?} */\n    MemoizedSelector.prototype.setResult;\n    /** @type {?} */\n    MemoizedSelector.prototype.clearResult;\n    /**\n     * @return {?}\n     */\n    MemoizedSelector.prototype.release = function () { };\n}\n/**\n * @record\n * @template State, Props, Result, ProjectorFn\n */\nfunction MemoizedSelectorWithProps() { }\nif (false) {\n    /** @type {?} */\n    MemoizedSelectorWithProps.prototype.projector;\n    /** @type {?} */\n    MemoizedSelectorWithProps.prototype.setResult;\n    /** @type {?} */\n    MemoizedSelectorWithProps.prototype.clearResult;\n    /**\n     * @return {?}\n     */\n    MemoizedSelectorWithProps.prototype.release = function () { };\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isEqualCheck(a, b) {\n    return a === b;\n}\n/**\n * @param {?} args\n * @param {?} lastArguments\n * @param {?} comparator\n * @return {?}\n */\nfunction isArgumentsChanged(args, lastArguments, comparator) {\n    for (let i = 0; i < args.length; i++) {\n        if (!comparator(args[i], lastArguments[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} projectionFn\n * @param {?} isResultEqual\n * @return {?}\n */\nfunction resultMemoize(projectionFn, isResultEqual) {\n    return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\n/**\n * @param {?} projectionFn\n * @param {?=} isArgumentsEqual\n * @param {?=} isResultEqual\n * @return {?}\n */\nfunction defaultMemoize(projectionFn, isArgumentsEqual = isEqualCheck, isResultEqual = isEqualCheck) {\n    /** @type {?} */\n    let lastArguments = null;\n    // tslint:disable-next-line:no-any anything could be the result.\n    /** @type {?} */\n    let lastResult = null;\n    /** @type {?} */\n    let overrideResult;\n    /**\n     * @return {?}\n     */\n    function reset() {\n        lastArguments = null;\n        lastResult = null;\n    }\n    /**\n     * @param {?=} result\n     * @return {?}\n     */\n    function setResult(result = undefined) {\n        overrideResult = { result };\n    }\n    /**\n     * @return {?}\n     */\n    function clearResult() {\n        overrideResult = undefined;\n    }\n    // tslint:disable-next-line:no-any anything could be the result.\n    /**\n     * @return {?}\n     */\n    function memoized() {\n        if (overrideResult !== undefined) {\n            return overrideResult.result;\n        }\n        if (!lastArguments) {\n            lastResult = projectionFn.apply(null, (/** @type {?} */ (arguments)));\n            lastArguments = arguments;\n            return lastResult;\n        }\n        if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n            return lastResult;\n        }\n        /** @type {?} */\n        const newResult = projectionFn.apply(null, (/** @type {?} */ (arguments)));\n        lastArguments = arguments;\n        if (isResultEqual(lastResult, newResult)) {\n            return lastResult;\n        }\n        lastResult = newResult;\n        return newResult;\n    }\n    return { memoized, reset, setResult, clearResult };\n}\n/**\n * @param {...?} input\n * @return {?}\n */\nfunction createSelector(...input) {\n    return createSelectorFactory(defaultMemoize)(...input);\n}\n/**\n * @param {?} state\n * @param {?} selectors\n * @param {?} props\n * @param {?} memoizedProjector\n * @return {?}\n */\nfunction defaultStateFn(state, selectors, props, memoizedProjector) {\n    if (props === undefined) {\n        /** @type {?} */\n        const args = ((/** @type {?} */ (selectors))).map((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn(state)));\n        return memoizedProjector.memoized.apply(null, args);\n    }\n    /** @type {?} */\n    const args = ((/** @type {?} */ (selectors))).map((/**\n     * @param {?} fn\n     * @return {?}\n     */\n    fn => fn(state, props)));\n    return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n/**\n * @param {?} memoize\n * @param {?=} options\n * @return {?}\n */\nfunction createSelectorFactory(memoize, options = {\n    stateFn: defaultStateFn,\n}) {\n    return (/**\n     * @param {...?} input\n     * @return {?}\n     */\n    function (...input) {\n        /** @type {?} */\n        let args = input;\n        if (Array.isArray(args[0])) {\n            const [head, ...tail] = args;\n            args = [...head, ...tail];\n        }\n        /** @type {?} */\n        const selectors = args.slice(0, args.length - 1);\n        /** @type {?} */\n        const projector = args[args.length - 1];\n        /** @type {?} */\n        const memoizedSelectors = selectors.filter((/**\n         * @param {?} selector\n         * @return {?}\n         */\n        (selector) => selector.release && typeof selector.release === 'function'));\n        /** @type {?} */\n        const memoizedProjector = memoize((/**\n         * @param {...?} selectors\n         * @return {?}\n         */\n        function (...selectors) {\n            return projector.apply(null, selectors);\n        }));\n        /** @type {?} */\n        const memoizedState = defaultMemoize((/**\n         * @param {?} state\n         * @param {?} props\n         * @return {?}\n         */\n        function (state, props) {\n            return options.stateFn.apply(null, [\n                state,\n                selectors,\n                props,\n                memoizedProjector,\n            ]);\n        }));\n        /**\n         * @return {?}\n         */\n        function release() {\n            memoizedState.reset();\n            memoizedProjector.reset();\n            memoizedSelectors.forEach((/**\n             * @param {?} selector\n             * @return {?}\n             */\n            selector => selector.release()));\n        }\n        return Object.assign(memoizedState.memoized, {\n            release,\n            projector: memoizedProjector.memoized,\n            setResult: memoizedState.setResult,\n            clearResult: memoizedState.clearResult,\n        });\n    });\n}\n/**\n * @param {?} featureName\n * @return {?}\n */\nfunction createFeatureSelector(featureName) {\n    return createSelector((/**\n     * @param {?} state\n     * @return {?}\n     */\n    (state) => {\n        /** @type {?} */\n        const featureState = state[featureName];\n        if (isDevMode() && !(featureName in state)) {\n            console.warn(`@ngrx/store: The feature name \\\"${featureName}\\\" does ` +\n                'not exist in the state, therefore createFeatureSelector ' +\n                'cannot access it.  Be sure it is imported in a loaded module ' +\n                `using StoreModule.forRoot('${featureName}', ...) or ` +\n                `StoreModule.forFeature('${featureName}', ...).  If the default ` +\n                'state is intended to be undefined, as is the case with router ' +\n                'state, this development-only warning message can be ignored.');\n        }\n        return featureState;\n    }), (/**\n     * @param {?} featureState\n     * @return {?}\n     */\n    (featureState) => featureState));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/meta-reducers/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RUNTIME_CHECK_URL = 'https://ngrx.io/guide/store/configuration/runtime-checks';\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isUndefined(target) {\n    return target === undefined;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isNull(target) {\n    return target === null;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isArray(target) {\n    return Array.isArray(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isString(target) {\n    return typeof target === 'string';\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isBoolean(target) {\n    return typeof target === 'boolean';\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isNumber(target) {\n    return typeof target === 'number';\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isObjectLike(target) {\n    return typeof target === 'object' && target !== null;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isObject(target) {\n    return isObjectLike(target) && !isArray(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isPlainObject(target) {\n    if (!isObject(target)) {\n        return false;\n    }\n    /** @type {?} */\n    const targetPrototype = Object.getPrototypeOf(target);\n    return targetPrototype === Object.prototype || targetPrototype === null;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isFunction(target) {\n    return typeof target === 'function';\n}\n/**\n * @param {?} target\n * @param {?} propertyName\n * @return {?}\n */\nfunction hasOwnProperty(target, propertyName) {\n    return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/meta-reducers/immutability_reducer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} reducer\n * @param {?} checks\n * @return {?}\n */\nfunction immutabilityCheckMetaReducer(reducer, checks) {\n    return (/**\n     * @param {?} state\n     * @param {?} action\n     * @return {?}\n     */\n    function (state, action) {\n        /** @type {?} */\n        const act = checks.action(action) ? freeze(action) : action;\n        /** @type {?} */\n        const nextState = reducer(state, act);\n        return checks.state() ? freeze(nextState) : nextState;\n    });\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction freeze(target) {\n    Object.freeze(target);\n    /** @type {?} */\n    const targetIsFunction = isFunction(target);\n    Object.getOwnPropertyNames(target).forEach((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => {\n        if (hasOwnProperty(target, prop) &&\n            (targetIsFunction\n                ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments'\n                : true)) {\n            /** @type {?} */\n            const propValue = target[prop];\n            if ((isObjectLike(propValue) || isFunction(propValue)) &&\n                !Object.isFrozen(propValue)) {\n                freeze(propValue);\n            }\n        }\n    }));\n    return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/meta-reducers/serialization_reducer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} reducer\n * @param {?} checks\n * @return {?}\n */\nfunction serializationCheckMetaReducer(reducer, checks) {\n    return (/**\n     * @param {?} state\n     * @param {?} action\n     * @return {?}\n     */\n    function (state, action) {\n        if (checks.action(action)) {\n            /** @type {?} */\n            const unserializableAction = getUnserializable(action);\n            throwIfUnserializable(unserializableAction, 'action');\n        }\n        /** @type {?} */\n        const nextState = reducer(state, action);\n        if (checks.state()) {\n            /** @type {?} */\n            const unserializableState = getUnserializable(nextState);\n            throwIfUnserializable(unserializableState, 'state');\n        }\n        return nextState;\n    });\n}\n/**\n * @param {?=} target\n * @param {?=} path\n * @return {?}\n */\nfunction getUnserializable(target, path = []) {\n    // Guard against undefined and null, e.g. a reducer that returns undefined\n    if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n        return {\n            path: ['root'],\n            value: target,\n        };\n    }\n    /** @type {?} */\n    const keys = Object.keys(target);\n    return keys.reduce((/**\n     * @param {?} result\n     * @param {?} key\n     * @return {?}\n     */\n    (result, key) => {\n        if (result) {\n            return result;\n        }\n        /** @type {?} */\n        const value = ((/** @type {?} */ (target)))[key];\n        if (isUndefined(value) ||\n            isNull(value) ||\n            isNumber(value) ||\n            isBoolean(value) ||\n            isString(value) ||\n            isArray(value)) {\n            return false;\n        }\n        if (isPlainObject(value)) {\n            return getUnserializable(value, [...path, key]);\n        }\n        return {\n            path: [...path, key],\n            value,\n        };\n    }), false);\n}\n/**\n * @param {?} unserializable\n * @param {?} context\n * @return {?}\n */\nfunction throwIfUnserializable(unserializable, context) {\n    if (unserializable === false) {\n        return;\n    }\n    /** @type {?} */\n    const unserializablePath = unserializable.path.join('.');\n    /** @type {?} */\n    const error = new Error(`Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`);\n    error.value = unserializable.value;\n    error.unserializablePath = unserializablePath;\n    throw error;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/meta-reducers/inNgZoneAssert_reducer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} reducer\n * @param {?} checks\n * @return {?}\n */\nfunction inNgZoneAssertMetaReducer(reducer, checks) {\n    return (/**\n     * @param {?} state\n     * @param {?} action\n     * @return {?}\n     */\n    function (state, action) {\n        if (checks.action(action) && !NgZone.isInAngularZone()) {\n            throw new Error(`Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`);\n        }\n        return reducer(state, action);\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/meta-reducers/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/runtime_checks.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?=} runtimeChecks\n * @return {?}\n */\nfunction createActiveRuntimeChecks(runtimeChecks) {\n    if (isDevMode()) {\n        return Object.assign({ strictStateSerializability: false, strictActionSerializability: false, strictStateImmutability: true, strictActionImmutability: true, strictActionWithinNgZone: false }, runtimeChecks);\n    }\n    return {\n        strictStateSerializability: false,\n        strictActionSerializability: false,\n        strictStateImmutability: false,\n        strictActionImmutability: false,\n        strictActionWithinNgZone: false,\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createSerializationCheckMetaReducer({ strictActionSerializability, strictStateSerializability, }) {\n    return (/**\n     * @param {?} reducer\n     * @return {?}\n     */\n    reducer => strictActionSerializability || strictStateSerializability\n        ? serializationCheckMetaReducer(reducer, {\n            action: (/**\n             * @param {?} action\n             * @return {?}\n             */\n            action => strictActionSerializability && !ignoreNgrxAction(action)),\n            state: (/**\n             * @return {?}\n             */\n            () => strictStateSerializability),\n        })\n        : reducer);\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createImmutabilityCheckMetaReducer({ strictActionImmutability, strictStateImmutability, }) {\n    return (/**\n     * @param {?} reducer\n     * @return {?}\n     */\n    reducer => strictActionImmutability || strictStateImmutability\n        ? immutabilityCheckMetaReducer(reducer, {\n            action: (/**\n             * @param {?} action\n             * @return {?}\n             */\n            action => strictActionImmutability && !ignoreNgrxAction(action)),\n            state: (/**\n             * @return {?}\n             */\n            () => strictStateImmutability),\n        })\n        : reducer);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction ignoreNgrxAction(action) {\n    return action.type.startsWith('@ngrx');\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createInNgZoneCheckMetaReducer({ strictActionWithinNgZone, }) {\n    return (/**\n     * @param {?} reducer\n     * @return {?}\n     */\n    reducer => strictActionWithinNgZone\n        ? inNgZoneAssertMetaReducer(reducer, {\n            action: (/**\n             * @param {?} action\n             * @return {?}\n             */\n            action => strictActionWithinNgZone && !ignoreNgrxAction(action)),\n        })\n        : reducer);\n}\n/**\n * @param {?=} runtimeChecks\n * @return {?}\n */\nfunction provideRuntimeChecks(runtimeChecks) {\n    return [\n        {\n            provide: _USER_RUNTIME_CHECKS,\n            useValue: runtimeChecks,\n        },\n        {\n            provide: USER_RUNTIME_CHECKS,\n            useFactory: _runtimeChecksFactory,\n            deps: [_USER_RUNTIME_CHECKS],\n        },\n        {\n            provide: _ACTIVE_RUNTIME_CHECKS,\n            deps: [USER_RUNTIME_CHECKS],\n            useFactory: createActiveRuntimeChecks,\n        },\n        {\n            provide: META_REDUCERS,\n            multi: true,\n            deps: [_ACTIVE_RUNTIME_CHECKS],\n            useFactory: createImmutabilityCheckMetaReducer,\n        },\n        {\n            provide: META_REDUCERS,\n            multi: true,\n            deps: [_ACTIVE_RUNTIME_CHECKS],\n            useFactory: createSerializationCheckMetaReducer,\n        },\n        {\n            provide: META_REDUCERS,\n            multi: true,\n            deps: [_ACTIVE_RUNTIME_CHECKS],\n            useFactory: createInNgZoneCheckMetaReducer,\n        },\n    ];\n}\n/**\n * @param {?} runtimeChecks\n * @return {?}\n */\nfunction _runtimeChecksFactory(runtimeChecks) {\n    return runtimeChecks;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/store_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StoreRootModule {\n    /**\n     * @param {?} actions$\n     * @param {?} reducer$\n     * @param {?} scannedActions$\n     * @param {?} store\n     * @param {?} guard\n     */\n    constructor(actions$, reducer$, scannedActions$, store, guard) {\n    }\n}\nStoreRootModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StoreRootModule });\nStoreRootModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StoreRootModule_Factory(t) { return new (t || StoreRootModule)(ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerObservable), ɵngcc0.ɵɵinject(ScannedActionsSubject), ɵngcc0.ɵɵinject(Store), ɵngcc0.ɵɵinject(_ROOT_STORE_GUARD, 8)); } });\n/** @nocollapse */\nStoreRootModule.ctorParameters = () => [\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: ScannedActionsSubject },\n    { type: Store },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_ROOT_STORE_GUARD,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StoreRootModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: Store }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [_ROOT_STORE_GUARD]\n            }] }]; }, null); })();\nclass StoreFeatureModule {\n    /**\n     * @param {?} features\n     * @param {?} featureReducers\n     * @param {?} reducerManager\n     * @param {?} root\n     */\n    constructor(features, featureReducers, reducerManager, root) {\n        this.features = features;\n        this.featureReducers = featureReducers;\n        this.reducerManager = reducerManager;\n        /** @type {?} */\n        const feats = features.map((/**\n         * @param {?} feature\n         * @param {?} index\n         * @return {?}\n         */\n        (feature, index) => {\n            /** @type {?} */\n            const featureReducerCollection = featureReducers.shift();\n            /** @type {?} */\n            const reducers = (/** @type {?} */ (featureReducerCollection /*TODO(#823)*/))[index];\n            return Object.assign(Object.assign({}, feature), { reducers, initialState: _initialStateFactory(feature.initialState) });\n        }));\n        reducerManager.addFeatures(feats);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.reducerManager.removeFeatures(this.features);\n    }\n}\nStoreFeatureModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StoreFeatureModule });\nStoreFeatureModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StoreFeatureModule_Factory(t) { return new (t || StoreFeatureModule)(ɵngcc0.ɵɵinject(_STORE_FEATURES), ɵngcc0.ɵɵinject(FEATURE_REDUCERS), ɵngcc0.ɵɵinject(ReducerManager), ɵngcc0.ɵɵinject(StoreRootModule)); } });\n/** @nocollapse */\nStoreFeatureModule.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [_STORE_FEATURES,] }] },\n    { type: Array, decorators: [{ type: Inject, args: [FEATURE_REDUCERS,] }] },\n    { type: ReducerManager },\n    { type: StoreRootModule }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StoreFeatureModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Inject,\n                args: [_STORE_FEATURES]\n            }] }, { type: Array, decorators: [{\n                type: Inject,\n                args: [FEATURE_REDUCERS]\n            }] }, { type: ReducerManager }, { type: StoreRootModule }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StoreFeatureModule.prototype.features;\n    /**\n     * @type {?}\n     * @private\n     */\n    StoreFeatureModule.prototype.featureReducers;\n    /**\n     * @type {?}\n     * @private\n     */\n    StoreFeatureModule.prototype.reducerManager;\n}\n/**\n * @record\n * @template T, V\n */\nfunction StoreConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    StoreConfig.prototype.initialState;\n    /** @type {?|undefined} */\n    StoreConfig.prototype.reducerFactory;\n    /** @type {?|undefined} */\n    StoreConfig.prototype.metaReducers;\n}\n/**\n * @record\n * @template T, V\n */\nfunction RootStoreConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    RootStoreConfig.prototype.runtimeChecks;\n}\nclass StoreModule {\n    /**\n     * @param {?} reducers\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(reducers, config = {}) {\n        return {\n            ngModule: StoreRootModule,\n            providers: [\n                {\n                    provide: _ROOT_STORE_GUARD,\n                    useFactory: _provideForRootGuard,\n                    deps: [[Store, new Optional(), new SkipSelf()]],\n                },\n                { provide: _INITIAL_STATE, useValue: config.initialState },\n                {\n                    provide: INITIAL_STATE,\n                    useFactory: _initialStateFactory,\n                    deps: [_INITIAL_STATE],\n                },\n                { provide: _INITIAL_REDUCERS, useValue: reducers },\n                {\n                    provide: _STORE_REDUCERS,\n                    useExisting: reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS,\n                },\n                {\n                    provide: INITIAL_REDUCERS,\n                    deps: [Injector, _INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n                    useFactory: _createStoreReducers,\n                },\n                {\n                    provide: USER_PROVIDED_META_REDUCERS,\n                    useValue: config.metaReducers ? config.metaReducers : [],\n                },\n                {\n                    provide: _RESOLVED_META_REDUCERS,\n                    deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n                    useFactory: _concatMetaReducers,\n                },\n                {\n                    provide: _REDUCER_FACTORY,\n                    useValue: config.reducerFactory\n                        ? config.reducerFactory\n                        : combineReducers,\n                },\n                {\n                    provide: REDUCER_FACTORY,\n                    deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n                    useFactory: createReducerFactory,\n                },\n                ACTIONS_SUBJECT_PROVIDERS,\n                REDUCER_MANAGER_PROVIDERS,\n                SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n                STATE_PROVIDERS,\n                STORE_PROVIDERS,\n                provideRuntimeChecks(config.runtimeChecks),\n            ],\n        };\n    }\n    /**\n     * @param {?} featureName\n     * @param {?} reducers\n     * @param {?=} config\n     * @return {?}\n     */\n    static forFeature(featureName, reducers, config = {}) {\n        return {\n            ngModule: StoreFeatureModule,\n            providers: [\n                {\n                    provide: _FEATURE_CONFIGS,\n                    multi: true,\n                    useValue: config,\n                },\n                {\n                    provide: STORE_FEATURES,\n                    multi: true,\n                    useValue: {\n                        key: featureName,\n                        reducerFactory: !(config instanceof InjectionToken) && config.reducerFactory\n                            ? config.reducerFactory\n                            : combineReducers,\n                        metaReducers: !(config instanceof InjectionToken) && config.metaReducers\n                            ? config.metaReducers\n                            : [],\n                        initialState: !(config instanceof InjectionToken) && config.initialState\n                            ? config.initialState\n                            : undefined,\n                    },\n                },\n                {\n                    provide: _STORE_FEATURES,\n                    deps: [Injector, _FEATURE_CONFIGS, STORE_FEATURES],\n                    useFactory: _createFeatureStore,\n                },\n                { provide: _FEATURE_REDUCERS, multi: true, useValue: reducers },\n                {\n                    provide: _FEATURE_REDUCERS_TOKEN,\n                    multi: true,\n                    useExisting: reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS,\n                },\n                {\n                    provide: FEATURE_REDUCERS,\n                    multi: true,\n                    deps: [\n                        Injector,\n                        _FEATURE_REDUCERS,\n                        [new Inject(_FEATURE_REDUCERS_TOKEN)],\n                    ],\n                    useFactory: _createFeatureReducers,\n                },\n            ],\n        };\n    }\n}\nStoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StoreModule });\nStoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StoreModule_Factory(t) { return new (t || StoreModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StoreModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n/**\n * @param {?} injector\n * @param {?} reducers\n * @return {?}\n */\nfunction _createStoreReducers(injector, reducers) {\n    return reducers instanceof InjectionToken ? injector.get(reducers) : reducers;\n}\n/**\n * @param {?} injector\n * @param {?} configs\n * @param {?} featureStores\n * @return {?}\n */\nfunction _createFeatureStore(injector, configs, featureStores) {\n    return featureStores.map((/**\n     * @param {?} feat\n     * @param {?} index\n     * @return {?}\n     */\n    (feat, index) => {\n        if (configs[index] instanceof InjectionToken) {\n            /** @type {?} */\n            const conf = injector.get(configs[index]);\n            return {\n                key: feat.key,\n                reducerFactory: conf.reducerFactory\n                    ? conf.reducerFactory\n                    : combineReducers,\n                metaReducers: conf.metaReducers ? conf.metaReducers : [],\n                initialState: conf.initialState,\n            };\n        }\n        return feat;\n    }));\n}\n/**\n * @param {?} injector\n * @param {?} reducerCollection\n * @return {?}\n */\nfunction _createFeatureReducers(injector, reducerCollection) {\n    /** @type {?} */\n    const reducers = reducerCollection.map((/**\n     * @param {?} reducer\n     * @return {?}\n     */\n    reducer => {\n        return reducer instanceof InjectionToken ? injector.get(reducer) : reducer;\n    }));\n    return reducers;\n}\n/**\n * @param {?} initialState\n * @return {?}\n */\nfunction _initialStateFactory(initialState) {\n    if (typeof initialState === 'function') {\n        return initialState();\n    }\n    return initialState;\n}\n/**\n * @param {?} metaReducers\n * @param {?} userProvidedMetaReducers\n * @return {?}\n */\nfunction _concatMetaReducers(metaReducers, userProvidedMetaReducers) {\n    return metaReducers.concat(userProvidedMetaReducers);\n}\n/**\n * @param {?} store\n * @return {?}\n */\nfunction _provideForRootGuard(store) {\n    if (store) {\n        throw new TypeError(`StoreModule.forRoot() called twice. Feature modules should use StoreModule.forFeature() instead.`);\n    }\n    return 'guarded';\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/reducer_creator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template S\n */\nfunction On() { }\nif (false) {\n    /** @type {?} */\n    On.prototype.reducer;\n    /** @type {?} */\n    On.prototype.types;\n}\n/**\n * @record\n * @template S, C\n */\nfunction OnReducer() { }\n/**\n * \\@description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param {...?} args `ActionCreator`'s followed by a state change function.\n *\n * **To maintain type-safety**: pass 10 or less `ActionCreator`'s.\n * @return {?} an association of action types with a state change function.\n */\nfunction on(...args) {\n    /** @type {?} */\n    const reducer = (/** @type {?} */ (args.pop()));\n    /** @type {?} */\n    const types = args.reduce((/**\n     * @param {?} result\n     * @param {?} creator\n     * @return {?}\n     */\n    (result, creator) => [...result, ((/** @type {?} */ (creator))).type]), (/** @type {?} */ ([])));\n    return { reducer, types };\n}\n/**\n * \\@description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * \\@usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`).  Cannot be used with class-based action creators.\n * - An action can be associated with multiple state change functions. In this case the functions will be executed in the specified order.\n * - The returned `ActionReducer` should additionally be returned from an exported `reducer` function.\n * This is because [function calls are not supported](https://angular.io/guide/aot-compiler#function-calls-are-not-supported) by the AOT compiler.\n *\n * **Declaring a reducer creator with an exported reducer function**\n *\n * ```ts\n * const featureReducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n *\n * export function reducer(state: State | undefined, action: Action) {\n *   return featureReducer(state, action);\n * }\n * ```\n * @template S, A\n * @param {?} initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param {...?} ons Associations between actions and state changes.\n * @return {?} A reducer function.\n *\n */\nfunction createReducer(initialState, ...ons) {\n    /** @type {?} */\n    const map = new Map();\n    for (let on of ons) {\n        for (let type of on.types) {\n            if (map.has(type)) {\n                /** @type {?} */\n                const existingReducer = (/** @type {?} */ (map.get(type)));\n                /** @type {?} */\n                const newReducer = (/**\n                 * @param {?} state\n                 * @param {?} action\n                 * @return {?}\n                 */\n                (state, action) => on.reducer(existingReducer(state, action), action));\n                map.set(type, newReducer);\n            }\n            else {\n                map.set(type, on.reducer);\n            }\n        }\n    }\n    return (/**\n     * @param {?=} state\n     * @param {?=} action\n     * @return {?}\n     */\n    function (state = initialState, action) {\n        /** @type {?} */\n        const reducer = map.get(action.type);\n        return reducer ? reducer(state, action) : state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/store/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActionsSubject, FEATURE_REDUCERS, INIT, INITIAL_REDUCERS, INITIAL_STATE, META_REDUCERS, REDUCER_FACTORY, ReducerManager, ReducerManagerDispatcher, ReducerObservable, STORE_FEATURES, ScannedActionsSubject, State, StateObservable, Store, StoreFeatureModule, StoreModule, StoreRootModule, UPDATE, USER_PROVIDED_META_REDUCERS, USER_RUNTIME_CHECKS, combineReducers, compose, createAction, createFeatureSelector, createReducer, createReducerFactory, createSelector, createSelectorFactory, defaultMemoize, defaultStateFn, on, props, reduceState, resultMemoize, select, union, STORE_PROVIDERS as ɵngrx_modules_store_store_b, createSerializationCheckMetaReducer as ɵngrx_modules_store_store_ba, createImmutabilityCheckMetaReducer as ɵngrx_modules_store_store_bb, createInNgZoneCheckMetaReducer as ɵngrx_modules_store_store_bc, provideRuntimeChecks as ɵngrx_modules_store_store_bd, _runtimeChecksFactory as ɵngrx_modules_store_store_be, ACTIONS_SUBJECT_PROVIDERS as ɵngrx_modules_store_store_c, REDUCER_MANAGER_PROVIDERS as ɵngrx_modules_store_store_d, SCANNED_ACTIONS_SUBJECT_PROVIDERS as ɵngrx_modules_store_store_e, isEqualCheck as ɵngrx_modules_store_store_f, STATE_PROVIDERS as ɵngrx_modules_store_store_g, _ROOT_STORE_GUARD as ɵngrx_modules_store_store_h, _INITIAL_STATE as ɵngrx_modules_store_store_i, _REDUCER_FACTORY as ɵngrx_modules_store_store_j, _INITIAL_REDUCERS as ɵngrx_modules_store_store_k, _STORE_REDUCERS as ɵngrx_modules_store_store_l, _FEATURE_REDUCERS as ɵngrx_modules_store_store_m, _FEATURE_CONFIGS as ɵngrx_modules_store_store_n, _STORE_FEATURES as ɵngrx_modules_store_store_o, _FEATURE_REDUCERS_TOKEN as ɵngrx_modules_store_store_p, _RESOLVED_META_REDUCERS as ɵngrx_modules_store_store_q, _USER_RUNTIME_CHECKS as ɵngrx_modules_store_store_r, _ACTIVE_RUNTIME_CHECKS as ɵngrx_modules_store_store_s, _createStoreReducers as ɵngrx_modules_store_store_t, _createFeatureStore as ɵngrx_modules_store_store_u, _createFeatureReducers as ɵngrx_modules_store_store_v, _initialStateFactory as ɵngrx_modules_store_store_w, _concatMetaReducers as ɵngrx_modules_store_store_x, _provideForRootGuard as ɵngrx_modules_store_store_y, createActiveRuntimeChecks as ɵngrx_modules_store_store_z };\n\n//# sourceMappingURL=store.js.map"],"sourceRoot":"webpack:///"}